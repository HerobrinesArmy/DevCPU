/*
* generated by Xtext
*/
parser grammar InternalDASMParser;

options {
	tokenVocab=InternalDASMLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package devcpu.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import devcpu.services.DASMGrammarAccess;

}

@members {
 
 	private DASMGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'!'");
		tokenNameToValue.put("KEYWORD_2", "'\%'");
		tokenNameToValue.put("KEYWORD_3", "'&'");
		tokenNameToValue.put("KEYWORD_4", "'('");
		tokenNameToValue.put("KEYWORD_5", "')'");
		tokenNameToValue.put("KEYWORD_6", "'*'");
		tokenNameToValue.put("KEYWORD_7", "'+'");
		tokenNameToValue.put("KEYWORD_8", "','");
		tokenNameToValue.put("KEYWORD_9", "'-'");
		tokenNameToValue.put("KEYWORD_10", "'/'");
		tokenNameToValue.put("KEYWORD_11", "':'");
		tokenNameToValue.put("KEYWORD_12", "'<'");
		tokenNameToValue.put("KEYWORD_13", "'>'");
		tokenNameToValue.put("KEYWORD_14", "'?'");
		tokenNameToValue.put("KEYWORD_15", "'A'");
		tokenNameToValue.put("KEYWORD_16", "'B'");
		tokenNameToValue.put("KEYWORD_17", "'C'");
		tokenNameToValue.put("KEYWORD_18", "'I'");
		tokenNameToValue.put("KEYWORD_19", "'J'");
		tokenNameToValue.put("KEYWORD_20", "'X'");
		tokenNameToValue.put("KEYWORD_21", "'Y'");
		tokenNameToValue.put("KEYWORD_22", "'Z'");
		tokenNameToValue.put("KEYWORD_23", "'['");
		tokenNameToValue.put("KEYWORD_24", "']'");
		tokenNameToValue.put("KEYWORD_25", "'^'");
		tokenNameToValue.put("KEYWORD_26", "'|'");
		tokenNameToValue.put("KEYWORD_27", "'~'");
		tokenNameToValue.put("KEYWORD_28", "'!='");
		tokenNameToValue.put("KEYWORD_29", "'&&'");
		tokenNameToValue.put("KEYWORD_30", "'<<'");
		tokenNameToValue.put("KEYWORD_31", "'<='");
		tokenNameToValue.put("KEYWORD_32", "'=='");
		tokenNameToValue.put("KEYWORD_33", "'>='");
		tokenNameToValue.put("KEYWORD_34", "'>>'");
		tokenNameToValue.put("KEYWORD_35", "'EX'");
		tokenNameToValue.put("KEYWORD_36", "'PC'");
		tokenNameToValue.put("KEYWORD_37", "'SP'");
		tokenNameToValue.put("KEYWORD_38", "'||'");
		tokenNameToValue.put("KEYWORD_39", "'>>>'");
		tokenNameToValue.put("KEYWORD_40", "'ADD'");
		tokenNameToValue.put("KEYWORD_41", "'ADX'");
		tokenNameToValue.put("KEYWORD_42", "'AND'");
		tokenNameToValue.put("KEYWORD_43", "'ASR'");
		tokenNameToValue.put("KEYWORD_44", "'BOR'");
		tokenNameToValue.put("KEYWORD_45", "'DAT'");
		tokenNameToValue.put("KEYWORD_46", "'DIV'");
		tokenNameToValue.put("KEYWORD_47", "'DVI'");
		tokenNameToValue.put("KEYWORD_48", "'HWI'");
		tokenNameToValue.put("KEYWORD_49", "'HWN'");
		tokenNameToValue.put("KEYWORD_50", "'HWQ'");
		tokenNameToValue.put("KEYWORD_51", "'IAG'");
		tokenNameToValue.put("KEYWORD_52", "'IAQ'");
		tokenNameToValue.put("KEYWORD_53", "'IAS'");
		tokenNameToValue.put("KEYWORD_54", "'IFA'");
		tokenNameToValue.put("KEYWORD_55", "'IFB'");
		tokenNameToValue.put("KEYWORD_56", "'IFC'");
		tokenNameToValue.put("KEYWORD_57", "'IFE'");
		tokenNameToValue.put("KEYWORD_58", "'IFG'");
		tokenNameToValue.put("KEYWORD_59", "'IFL'");
		tokenNameToValue.put("KEYWORD_60", "'IFN'");
		tokenNameToValue.put("KEYWORD_61", "'IFU'");
		tokenNameToValue.put("KEYWORD_62", "'INT'");
		tokenNameToValue.put("KEYWORD_63", "'JSR'");
		tokenNameToValue.put("KEYWORD_64", "'MDI'");
		tokenNameToValue.put("KEYWORD_65", "'MLI'");
		tokenNameToValue.put("KEYWORD_66", "'MOD'");
		tokenNameToValue.put("KEYWORD_67", "'MUL'");
		tokenNameToValue.put("KEYWORD_68", "'POP'");
		tokenNameToValue.put("KEYWORD_69", "'RFI'");
		tokenNameToValue.put("KEYWORD_70", "'SBX'");
		tokenNameToValue.put("KEYWORD_71", "'SET'");
		tokenNameToValue.put("KEYWORD_72", "'SHL'");
		tokenNameToValue.put("KEYWORD_73", "'SHR'");
		tokenNameToValue.put("KEYWORD_74", "'STD'");
		tokenNameToValue.put("KEYWORD_75", "'STI'");
		tokenNameToValue.put("KEYWORD_76", "'SUB'");
		tokenNameToValue.put("KEYWORD_77", "'XOR'");
		tokenNameToValue.put("KEYWORD_78", "'.dat'");
		tokenNameToValue.put("KEYWORD_79", "'PICK'");
		tokenNameToValue.put("KEYWORD_80", "'PUSH'");
		tokenNameToValue.put("KEYWORD_81", "'#align'");
		tokenNameToValue.put("KEYWORD_82", "'.align'");
		tokenNameToValue.put("KEYWORD_83", "'#import'");
		tokenNameToValue.put("KEYWORD_84", "'#origin'");
		tokenNameToValue.put("KEYWORD_85", "'.import'");
		tokenNameToValue.put("KEYWORD_86", "'.origin'");
		tokenNameToValue.put("KEYWORD_87", "'#include'");
		tokenNameToValue.put("KEYWORD_88", "'.include'");
 	}
 	
    public void setGrammarAccess(DASMGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLineDefinition
entryRuleLineDefinition 
:
{ before(grammarAccess.getLineDefinitionRule()); }
	 ruleLineDefinition
{ after(grammarAccess.getLineDefinitionRule()); } 
	 EOF 
;

// Rule LineDefinition
ruleLineDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLineDefinitionAccess().getGroup()); }
(rule__LineDefinition__Group__0)
{ after(grammarAccess.getLineDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLineContent
entryRuleLineContent 
:
{ before(grammarAccess.getLineContentRule()); }
	 ruleLineContent
{ after(grammarAccess.getLineContentRule()); } 
	 EOF 
;

// Rule LineContent
ruleLineContent 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLineContentAccess().getAlternatives()); }
(rule__LineContent__Alternatives)
{ after(grammarAccess.getLineContentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDirective
entryRuleDirective 
:
{ before(grammarAccess.getDirectiveRule()); }
	 ruleDirective
{ after(grammarAccess.getDirectiveRule()); } 
	 EOF 
;

// Rule Directive
ruleDirective 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDirectiveAccess().getAlternatives()); }
(rule__Directive__Alternatives)
{ after(grammarAccess.getDirectiveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOriginDirective
entryRuleOriginDirective 
:
{ before(grammarAccess.getOriginDirectiveRule()); }
	 ruleOriginDirective
{ after(grammarAccess.getOriginDirectiveRule()); } 
	 EOF 
;

// Rule OriginDirective
ruleOriginDirective 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOriginDirectiveAccess().getGroup()); }
(rule__OriginDirective__Group__0)
{ after(grammarAccess.getOriginDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective 
:
{ before(grammarAccess.getIncludeDirectiveRule()); }
	 ruleIncludeDirective
{ after(grammarAccess.getIncludeDirectiveRule()); } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIncludeDirectiveAccess().getGroup()); }
(rule__IncludeDirective__Group__0)
{ after(grammarAccess.getIncludeDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataLine
entryRuleDataLine 
:
{ before(grammarAccess.getDataLineRule()); }
	 ruleDataLine
{ after(grammarAccess.getDataLineRule()); } 
	 EOF 
;

// Rule DataLine
ruleDataLine 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDataLineAccess().getGroup()); }
(rule__DataLine__Group__0)
{ after(grammarAccess.getDataLineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataElement
entryRuleDataElement 
:
{ before(grammarAccess.getDataElementRule()); }
	 ruleDataElement
{ after(grammarAccess.getDataElementRule()); } 
	 EOF 
;

// Rule DataElement
ruleDataElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDataElementAccess().getAlternatives()); }
(rule__DataElement__Alternatives)
{ after(grammarAccess.getDataElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup()); }
(rule__LiteralExpression__Group__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression 
:
{ before(grammarAccess.getTerminalExpressionRule()); }
	 ruleTerminalExpression
{ after(grammarAccess.getTerminalExpressionRule()); } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
(rule__TerminalExpression__Alternatives)
{ after(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNonGroupOperand
entryRuleNonGroupOperand 
:
{ before(grammarAccess.getNonGroupOperandRule()); }
	 ruleNonGroupOperand
{ after(grammarAccess.getNonGroupOperandRule()); } 
	 EOF 
;

// Rule NonGroupOperand
ruleNonGroupOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNonGroupOperandAccess().getAlternatives()); }
(rule__NonGroupOperand__Alternatives)
{ after(grammarAccess.getNonGroupOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStackValue
entryRuleStackValue 
:
{ before(grammarAccess.getStackValueRule()); }
	 ruleStackValue
{ after(grammarAccess.getStackValueRule()); } 
	 EOF 
;

// Rule StackValue
ruleStackValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStackValueAccess().getAlternatives()); }
(rule__StackValue__Alternatives)
{ after(grammarAccess.getStackValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePickValue
entryRulePickValue 
:
{ before(grammarAccess.getPickValueRule()); }
	 rulePickValue
{ after(grammarAccess.getPickValueRule()); } 
	 EOF 
;

// Rule PickValue
rulePickValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPickValueAccess().getGroup()); }
(rule__PickValue__Group__0)
{ after(grammarAccess.getPickValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabel
entryRuleLabel 
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLabelAccess().getGroup()); }
(rule__Label__Group__0)
{ after(grammarAccess.getLabelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicInstruction
entryRuleBasicInstruction 
:
{ before(grammarAccess.getBasicInstructionRule()); }
	 ruleBasicInstruction
{ after(grammarAccess.getBasicInstructionRule()); } 
	 EOF 
;

// Rule BasicInstruction
ruleBasicInstruction 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBasicInstructionAccess().getGroup()); }
(rule__BasicInstruction__Group__0)
{ after(grammarAccess.getBasicInstructionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpecialInstruction
entryRuleSpecialInstruction 
:
{ before(grammarAccess.getSpecialInstructionRule()); }
	 ruleSpecialInstruction
{ after(grammarAccess.getSpecialInstructionRule()); } 
	 EOF 
;

// Rule SpecialInstruction
ruleSpecialInstruction 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpecialInstructionAccess().getGroup()); }
(rule__SpecialInstruction__Group__0)
{ after(grammarAccess.getSpecialInstructionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralAccess().getNumberAssignment()); }
(rule__Literal__NumberAssignment)
{ after(grammarAccess.getLiteralAccess().getNumberAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegister
entryRuleRegister 
:
{ before(grammarAccess.getRegisterRule()); }
	 ruleRegister
{ after(grammarAccess.getRegisterRule()); } 
	 EOF 
;

// Rule Register
ruleRegister 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRegisterAccess().getAlternatives()); }
(rule__Register__Alternatives)
{ after(grammarAccess.getRegisterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleAddressExpression
entryRuleAddressExpression 
:
{ before(grammarAccess.getAddressExpressionRule()); }
	 ruleAddressExpression
{ after(grammarAccess.getAddressExpressionRule()); } 
	 EOF 
;

// Rule AddressExpression
ruleAddressExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAddressExpressionAccess().getGroup()); }
(rule__AddressExpression__Group__0)
{ after(grammarAccess.getAddressExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNumberAccess().getAlternatives()); }
(rule__Number__Alternatives)
{ after(grammarAccess.getNumberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BasicOpcode
ruleBasicOpcode
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicOpcodeAccess().getAlternatives()); }
(rule__BasicOpcode__Alternatives)
{ after(grammarAccess.getBasicOpcodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SpecialOpcode
ruleSpecialOpcode
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialOpcodeAccess().getAlternatives()); }
(rule__SpecialOpcode__Alternatives)
{ after(grammarAccess.getSpecialOpcodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule StandardRegister
ruleStandardRegister
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStandardRegisterAccess().getAlternatives()); }
(rule__StandardRegister__Alternatives)
{ after(grammarAccess.getStandardRegisterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SpecialRegister
ruleSpecialRegister
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialRegisterAccess().getAlternatives()); }
(rule__SpecialRegister__Alternatives)
{ after(grammarAccess.getSpecialRegisterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__LineContent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineContentAccess().getInstructionParserRuleCall_0()); }
	ruleInstruction
{ after(grammarAccess.getLineContentAccess().getInstructionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLineContentAccess().getDirectiveParserRuleCall_1()); }
	ruleDirective
{ after(grammarAccess.getLineContentAccess().getDirectiveParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLineContentAccess().getDataLineParserRuleCall_2()); }
	ruleDataLine
{ after(grammarAccess.getLineContentAccess().getDataLineParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectiveAccess().getIncludeDirectiveParserRuleCall_0()); }
	ruleIncludeDirective
{ after(grammarAccess.getDirectiveAccess().getIncludeDirectiveParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDirectiveAccess().getOriginDirectiveParserRuleCall_1()); }
	ruleOriginDirective
{ after(grammarAccess.getDirectiveAccess().getOriginDirectiveParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OriginDirective__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOriginDirectiveAccess().getOriginKeyword_0_0()); }

	KEYWORD_86 

{ after(grammarAccess.getOriginDirectiveAccess().getOriginKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getOriginDirectiveAccess().getOriginKeyword_0_1()); }

	KEYWORD_84 

{ after(grammarAccess.getOriginDirectiveAccess().getOriginKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getOriginDirectiveAccess().getAlignKeyword_0_2()); }

	KEYWORD_82 

{ after(grammarAccess.getOriginDirectiveAccess().getAlignKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getOriginDirectiveAccess().getAlignKeyword_0_3()); }

	KEYWORD_81 

{ after(grammarAccess.getOriginDirectiveAccess().getAlignKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0_0()); }

	KEYWORD_88 

{ after(grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0_1()); }

	KEYWORD_87 

{ after(grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getIncludeDirectiveAccess().getImportKeyword_0_2()); }

	KEYWORD_85 

{ after(grammarAccess.getIncludeDirectiveAccess().getImportKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getIncludeDirectiveAccess().getImportKeyword_0_3()); }

	KEYWORD_83 

{ after(grammarAccess.getIncludeDirectiveAccess().getImportKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataLine__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataLineAccess().getDATKeyword_0_0()); }

	KEYWORD_45 

{ after(grammarAccess.getDataLineAccess().getDATKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getDataLineAccess().getDatKeyword_0_1()); }

	KEYWORD_78 

{ after(grammarAccess.getDataLineAccess().getDatKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataElementAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getDataElementAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDataElementAccess().getNumberParserRuleCall_1()); }
	ruleNumber
{ after(grammarAccess.getDataElementAccess().getNumberParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_0()); }
(rule__TerminalExpression__Group_0__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1()); }
(rule__TerminalExpression__ValueAssignment_1)
{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NonGroupOperand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonGroupOperandAccess().getRegisterParserRuleCall_0()); }
	ruleRegister
{ after(grammarAccess.getNonGroupOperandAccess().getRegisterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNonGroupOperandAccess().getLiteralParserRuleCall_1()); }
	ruleLiteral
{ after(grammarAccess.getNonGroupOperandAccess().getLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNonGroupOperandAccess().getLabelNameAssignment_2()); }
(rule__NonGroupOperand__LabelNameAssignment_2)
{ after(grammarAccess.getNonGroupOperandAccess().getLabelNameAssignment_2()); }
)

    |(
{ before(grammarAccess.getNonGroupOperandAccess().getStackValueParserRuleCall_3()); }
	ruleStackValue
{ after(grammarAccess.getNonGroupOperandAccess().getStackValueParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StackValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStackValueAccess().getPOPKeyword_0()); }

	KEYWORD_68 

{ after(grammarAccess.getStackValueAccess().getPOPKeyword_0()); }
)

    |(
{ before(grammarAccess.getStackValueAccess().getPUSHKeyword_1()); }

	KEYWORD_80 

{ after(grammarAccess.getStackValueAccess().getPUSHKeyword_1()); }
)

    |(
{ before(grammarAccess.getStackValueAccess().getPickValueParserRuleCall_2()); }
	rulePickValue
{ after(grammarAccess.getStackValueAccess().getPickValueParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getBasicInstructionParserRuleCall_0()); }
	ruleBasicInstruction
{ after(grammarAccess.getInstructionAccess().getBasicInstructionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getSpecialInstructionParserRuleCall_1()); }
	ruleSpecialInstruction
{ after(grammarAccess.getInstructionAccess().getSpecialInstructionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getLiteralExpressionParserRuleCall_0()); }
	ruleLiteralExpression
{ after(grammarAccess.getValueAccess().getLiteralExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getAddressExpressionParserRuleCall_1()); }
	ruleAddressExpression
{ after(grammarAccess.getValueAccess().getAddressExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisterAccess().getStandardRegisterAssignment_0()); }
(rule__Register__StandardRegisterAssignment_0)
{ after(grammarAccess.getRegisterAccess().getStandardRegisterAssignment_0()); }
)

    |(
{ before(grammarAccess.getRegisterAccess().getSpecialRegisterAssignment_1()); }
(rule__Register__SpecialRegisterAssignment_1)
{ after(grammarAccess.getRegisterAccess().getSpecialRegisterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getHEXNUMBERTerminalRuleCall_0()); }
	RULE_HEXNUMBER
{ after(grammarAccess.getNumberAccess().getHEXNUMBERTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getDECNUMBERTerminalRuleCall_1()); }
	RULE_DECNUMBER
{ after(grammarAccess.getNumberAccess().getDECNUMBERTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getBINNUMBERTerminalRuleCall_2()); }
	RULE_BINNUMBER
{ after(grammarAccess.getNumberAccess().getBINNUMBERTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicOpcode__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicOpcodeAccess().getSETEnumLiteralDeclaration_0()); }
(	KEYWORD_71
)
{ after(grammarAccess.getBasicOpcodeAccess().getSETEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getADDEnumLiteralDeclaration_1()); }
(	KEYWORD_40
)
{ after(grammarAccess.getBasicOpcodeAccess().getADDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getSUBEnumLiteralDeclaration_2()); }
(	KEYWORD_76
)
{ after(grammarAccess.getBasicOpcodeAccess().getSUBEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getMULEnumLiteralDeclaration_3()); }
(	KEYWORD_67
)
{ after(grammarAccess.getBasicOpcodeAccess().getMULEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getMLIEnumLiteralDeclaration_4()); }
(	KEYWORD_65
)
{ after(grammarAccess.getBasicOpcodeAccess().getMLIEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getDIVEnumLiteralDeclaration_5()); }
(	KEYWORD_46
)
{ after(grammarAccess.getBasicOpcodeAccess().getDIVEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getDVIEnumLiteralDeclaration_6()); }
(	KEYWORD_47
)
{ after(grammarAccess.getBasicOpcodeAccess().getDVIEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getMODEnumLiteralDeclaration_7()); }
(	KEYWORD_66
)
{ after(grammarAccess.getBasicOpcodeAccess().getMODEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getMDIEnumLiteralDeclaration_8()); }
(	KEYWORD_64
)
{ after(grammarAccess.getBasicOpcodeAccess().getMDIEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getANDEnumLiteralDeclaration_9()); }
(	KEYWORD_42
)
{ after(grammarAccess.getBasicOpcodeAccess().getANDEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getBOREnumLiteralDeclaration_10()); }
(	KEYWORD_44
)
{ after(grammarAccess.getBasicOpcodeAccess().getBOREnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getXOREnumLiteralDeclaration_11()); }
(	KEYWORD_77
)
{ after(grammarAccess.getBasicOpcodeAccess().getXOREnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getSHREnumLiteralDeclaration_12()); }
(	KEYWORD_73
)
{ after(grammarAccess.getBasicOpcodeAccess().getSHREnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getASREnumLiteralDeclaration_13()); }
(	KEYWORD_43
)
{ after(grammarAccess.getBasicOpcodeAccess().getASREnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getSHLEnumLiteralDeclaration_14()); }
(	KEYWORD_72
)
{ after(grammarAccess.getBasicOpcodeAccess().getSHLEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getIFBEnumLiteralDeclaration_15()); }
(	KEYWORD_55
)
{ after(grammarAccess.getBasicOpcodeAccess().getIFBEnumLiteralDeclaration_15()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getIFCEnumLiteralDeclaration_16()); }
(	KEYWORD_56
)
{ after(grammarAccess.getBasicOpcodeAccess().getIFCEnumLiteralDeclaration_16()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getIFEEnumLiteralDeclaration_17()); }
(	KEYWORD_57
)
{ after(grammarAccess.getBasicOpcodeAccess().getIFEEnumLiteralDeclaration_17()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getIFNEnumLiteralDeclaration_18()); }
(	KEYWORD_60
)
{ after(grammarAccess.getBasicOpcodeAccess().getIFNEnumLiteralDeclaration_18()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getIFGEnumLiteralDeclaration_19()); }
(	KEYWORD_58
)
{ after(grammarAccess.getBasicOpcodeAccess().getIFGEnumLiteralDeclaration_19()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getIFAEnumLiteralDeclaration_20()); }
(	KEYWORD_54
)
{ after(grammarAccess.getBasicOpcodeAccess().getIFAEnumLiteralDeclaration_20()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getIFLEnumLiteralDeclaration_21()); }
(	KEYWORD_59
)
{ after(grammarAccess.getBasicOpcodeAccess().getIFLEnumLiteralDeclaration_21()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getIFUEnumLiteralDeclaration_22()); }
(	KEYWORD_61
)
{ after(grammarAccess.getBasicOpcodeAccess().getIFUEnumLiteralDeclaration_22()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getADXEnumLiteralDeclaration_23()); }
(	KEYWORD_41
)
{ after(grammarAccess.getBasicOpcodeAccess().getADXEnumLiteralDeclaration_23()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getSBXEnumLiteralDeclaration_24()); }
(	KEYWORD_70
)
{ after(grammarAccess.getBasicOpcodeAccess().getSBXEnumLiteralDeclaration_24()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getSTIEnumLiteralDeclaration_25()); }
(	KEYWORD_75
)
{ after(grammarAccess.getBasicOpcodeAccess().getSTIEnumLiteralDeclaration_25()); }
)

    |(
{ before(grammarAccess.getBasicOpcodeAccess().getSTDEnumLiteralDeclaration_26()); }
(	KEYWORD_74
)
{ after(grammarAccess.getBasicOpcodeAccess().getSTDEnumLiteralDeclaration_26()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialOpcode__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialOpcodeAccess().getJSREnumLiteralDeclaration_0()); }
(	KEYWORD_63
)
{ after(grammarAccess.getSpecialOpcodeAccess().getJSREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSpecialOpcodeAccess().getINTEnumLiteralDeclaration_1()); }
(	KEYWORD_62
)
{ after(grammarAccess.getSpecialOpcodeAccess().getINTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getSpecialOpcodeAccess().getIAGEnumLiteralDeclaration_2()); }
(	KEYWORD_51
)
{ after(grammarAccess.getSpecialOpcodeAccess().getIAGEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getSpecialOpcodeAccess().getIASEnumLiteralDeclaration_3()); }
(	KEYWORD_53
)
{ after(grammarAccess.getSpecialOpcodeAccess().getIASEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getSpecialOpcodeAccess().getRFIEnumLiteralDeclaration_4()); }
(	KEYWORD_69
)
{ after(grammarAccess.getSpecialOpcodeAccess().getRFIEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getSpecialOpcodeAccess().getIAQEnumLiteralDeclaration_5()); }
(	KEYWORD_52
)
{ after(grammarAccess.getSpecialOpcodeAccess().getIAQEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getSpecialOpcodeAccess().getHWNEnumLiteralDeclaration_6()); }
(	KEYWORD_49
)
{ after(grammarAccess.getSpecialOpcodeAccess().getHWNEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getSpecialOpcodeAccess().getHWQEnumLiteralDeclaration_7()); }
(	KEYWORD_50
)
{ after(grammarAccess.getSpecialOpcodeAccess().getHWQEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getSpecialOpcodeAccess().getHWIEnumLiteralDeclaration_8()); }
(	KEYWORD_48
)
{ after(grammarAccess.getSpecialOpcodeAccess().getHWIEnumLiteralDeclaration_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StandardRegister__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStandardRegisterAccess().getAEnumLiteralDeclaration_0()); }
(	KEYWORD_15
)
{ after(grammarAccess.getStandardRegisterAccess().getAEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getStandardRegisterAccess().getBEnumLiteralDeclaration_1()); }
(	KEYWORD_16
)
{ after(grammarAccess.getStandardRegisterAccess().getBEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getStandardRegisterAccess().getCEnumLiteralDeclaration_2()); }
(	KEYWORD_17
)
{ after(grammarAccess.getStandardRegisterAccess().getCEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getStandardRegisterAccess().getXEnumLiteralDeclaration_3()); }
(	KEYWORD_20
)
{ after(grammarAccess.getStandardRegisterAccess().getXEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getStandardRegisterAccess().getYEnumLiteralDeclaration_4()); }
(	KEYWORD_21
)
{ after(grammarAccess.getStandardRegisterAccess().getYEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getStandardRegisterAccess().getZEnumLiteralDeclaration_5()); }
(	KEYWORD_22
)
{ after(grammarAccess.getStandardRegisterAccess().getZEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getStandardRegisterAccess().getIEnumLiteralDeclaration_6()); }
(	KEYWORD_18
)
{ after(grammarAccess.getStandardRegisterAccess().getIEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getStandardRegisterAccess().getJEnumLiteralDeclaration_7()); }
(	KEYWORD_19
)
{ after(grammarAccess.getStandardRegisterAccess().getJEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialRegister__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialRegisterAccess().getSPEnumLiteralDeclaration_0()); }
(	KEYWORD_37
)
{ after(grammarAccess.getSpecialRegisterAccess().getSPEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSpecialRegisterAccess().getPCEnumLiteralDeclaration_1()); }
(	KEYWORD_36
)
{ after(grammarAccess.getSpecialRegisterAccess().getPCEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getSpecialRegisterAccess().getEXEnumLiteralDeclaration_2()); }
(	KEYWORD_35
)
{ after(grammarAccess.getSpecialRegisterAccess().getEXEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0()); }
(	KEYWORD_7
)
{ after(grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1()); }
(	KEYWORD_9
)
{ after(grammarAccess.getOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getMULTIPLYEnumLiteralDeclaration_2()); }
(	KEYWORD_6
)
{ after(grammarAccess.getOperatorAccess().getMULTIPLYEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getDIVIDEEnumLiteralDeclaration_3()); }
(	KEYWORD_10
)
{ after(grammarAccess.getOperatorAccess().getDIVIDEEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getMODULUSEnumLiteralDeclaration_4()); }
(	KEYWORD_2
)
{ after(grammarAccess.getOperatorAccess().getMODULUSEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLEFT_SHIFTEnumLiteralDeclaration_5()); }
(	KEYWORD_30
)
{ after(grammarAccess.getOperatorAccess().getLEFT_SHIFTEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_6()); }
(	KEYWORD_34
)
{ after(grammarAccess.getOperatorAccess().getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLOGICAL_RIGHT_SHIFTEnumLiteralDeclaration_7()); }
(	KEYWORD_39
)
{ after(grammarAccess.getOperatorAccess().getLOGICAL_RIGHT_SHIFTEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration_8()); }
(	KEYWORD_3
)
{ after(grammarAccess.getOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getBITWISE_OREnumLiteralDeclaration_9()); }
(	KEYWORD_26
)
{ after(grammarAccess.getOperatorAccess().getBITWISE_OREnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getBITWISE_XOREnumLiteralDeclaration_10()); }
(	KEYWORD_25
)
{ after(grammarAccess.getOperatorAccess().getBITWISE_XOREnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration_11()); }
(	KEYWORD_27
)
{ after(grammarAccess.getOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLOGICAL_NOTEnumLiteralDeclaration_12()); }
(	KEYWORD_1
)
{ after(grammarAccess.getOperatorAccess().getLOGICAL_NOTEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getEQUALEnumLiteralDeclaration_13()); }
(	KEYWORD_32
)
{ after(grammarAccess.getOperatorAccess().getEQUALEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_14()); }
(	KEYWORD_28
)
{ after(grammarAccess.getOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGREATEREnumLiteralDeclaration_15()); }
(	KEYWORD_13
)
{ after(grammarAccess.getOperatorAccess().getGREATEREnumLiteralDeclaration_15()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_16()); }
(	KEYWORD_33
)
{ after(grammarAccess.getOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_16()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLESSEnumLiteralDeclaration_17()); }
(	KEYWORD_12
)
{ after(grammarAccess.getOperatorAccess().getLESSEnumLiteralDeclaration_17()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_18()); }
(	KEYWORD_31
)
{ after(grammarAccess.getOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_18()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration_19()); }
(	KEYWORD_29
)
{ after(grammarAccess.getOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration_19()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLOGICAL_OREnumLiteralDeclaration_20()); }
(	KEYWORD_38
)
{ after(grammarAccess.getOperatorAccess().getLOGICAL_OREnumLiteralDeclaration_20()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getCONDITIONAL_TRUEEnumLiteralDeclaration_21()); }
(	KEYWORD_14
)
{ after(grammarAccess.getOperatorAccess().getCONDITIONAL_TRUEEnumLiteralDeclaration_21()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getCONDITIONAL_FALSEEnumLiteralDeclaration_22()); }
(	KEYWORD_11
)
{ after(grammarAccess.getOperatorAccess().getCONDITIONAL_FALSEEnumLiteralDeclaration_22()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLineDefinitionParserRuleCall_0()); }
	ruleLineDefinition
{ after(grammarAccess.getModelAccess().getLineDefinitionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)?
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getModelAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__1__Impl
	rule__Model__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNLTerminalRuleCall_1_1()); }
	RULE_NL
{ after(grammarAccess.getModelAccess().getNLTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRightAssignment_1_2()); }
(rule__Model__RightAssignment_1_2)
{ after(grammarAccess.getModelAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LineDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDefinition__Group__0__Impl
	rule__LineDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineDefinitionAccess().getLabelsAssignment_0()); }
(rule__LineDefinition__LabelsAssignment_0)*
{ after(grammarAccess.getLineDefinitionAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LineDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDefinition__Group__1__Impl
	rule__LineDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineDefinitionAccess().getContentAssignment_1()); }
(rule__LineDefinition__ContentAssignment_1)?
{ after(grammarAccess.getLineDefinitionAccess().getContentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LineDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineDefinitionAccess().getCommentAssignment_2()); }
(rule__LineDefinition__CommentAssignment_2)?
{ after(grammarAccess.getLineDefinitionAccess().getCommentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OriginDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OriginDirective__Group__0__Impl
	rule__OriginDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OriginDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOriginDirectiveAccess().getAlternatives_0()); }
(rule__OriginDirective__Alternatives_0)
{ after(grammarAccess.getOriginDirectiveAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OriginDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OriginDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OriginDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOriginDirectiveAccess().getValueAssignment_1()); }
(rule__OriginDirective__ValueAssignment_1)
{ after(grammarAccess.getOriginDirectiveAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IncludeDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__0__Impl
	rule__IncludeDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getAlternatives_0()); }
(rule__IncludeDirective__Alternatives_0)
{ after(grammarAccess.getIncludeDirectiveAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getNameAssignment_1()); }
(rule__IncludeDirective__NameAssignment_1)
{ after(grammarAccess.getIncludeDirectiveAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataLine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataLine__Group__0__Impl
	rule__DataLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataLine__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataLineAccess().getAlternatives_0()); }
(rule__DataLine__Alternatives_0)
{ after(grammarAccess.getDataLineAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataLine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataLine__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDataLineAccess().getGroup_1()); }
(rule__DataLine__Group_1__0)
{ after(grammarAccess.getDataLineAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getDataLineAccess().getGroup_1()); }
(rule__DataLine__Group_1__0)*
{ after(grammarAccess.getDataLineAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataLine__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataLine__Group_1__0__Impl
	rule__DataLine__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataLine__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataLineAccess().getCommaKeyword_1_0()); }
(
	KEYWORD_8 
)*
{ after(grammarAccess.getDataLineAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataLine__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataLine__Group_1__1__Impl
	rule__DataLine__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataLine__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataLineAccess().getDataElementsAssignment_1_1()); }
(rule__DataLine__DataElementsAssignment_1_1)
{ after(grammarAccess.getDataLineAccess().getDataElementsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataLine__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataLine__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataLine__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataLineAccess().getCommaKeyword_1_2()); }
(
	KEYWORD_8 
)*
{ after(grammarAccess.getDataLineAccess().getCommaKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group__0__Impl
	rule__LiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getTerminalExpressionParserRuleCall_0()); }
	ruleTerminalExpression
{ after(grammarAccess.getLiteralExpressionAccess().getTerminalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
(rule__LiteralExpression__Group_1__0)?
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_1__0__Impl
	rule__LiteralExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_1__1__Impl
	rule__LiteralExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getOpAssignment_1_1()); }
(rule__LiteralExpression__OpAssignment_1_1)
{ after(grammarAccess.getLiteralExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getRightAssignment_1_2()); }
(rule__LiteralExpression__RightAssignment_1_2)
{ after(grammarAccess.getLiteralExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TerminalExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_0__0__Impl
	rule__TerminalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	KEYWORD_4 

{ after(grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_0__1__Impl
	rule__TerminalExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getLiteralExpressionParserRuleCall_0_1()); }
	ruleLiteralExpression
{ after(grammarAccess.getTerminalExpressionAccess().getLiteralExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_0_2()); }

	KEYWORD_5 

{ after(grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PickValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PickValue__Group__0__Impl
	rule__PickValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PickValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPickValueAccess().getPICKKeyword_0()); }

	KEYWORD_79 

{ after(grammarAccess.getPickValueAccess().getPICKKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PickValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PickValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PickValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPickValueAccess().getPickValueAssignment_1()); }
(rule__PickValue__PickValueAssignment_1)
{ after(grammarAccess.getPickValueAccess().getPickValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Label__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getColonKeyword_0()); }

	KEYWORD_11 

{ after(grammarAccess.getLabelAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getNameAssignment_1()); }
(rule__Label__NameAssignment_1)
{ after(grammarAccess.getLabelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicInstruction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicInstruction__Group__0__Impl
	rule__BasicInstruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicInstruction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicInstructionAccess().getOpcodeAssignment_0()); }
(rule__BasicInstruction__OpcodeAssignment_0)
{ after(grammarAccess.getBasicInstructionAccess().getOpcodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicInstruction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicInstruction__Group__1__Impl
	rule__BasicInstruction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicInstruction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicInstructionAccess().getBAssignment_1()); }
(rule__BasicInstruction__BAssignment_1)
{ after(grammarAccess.getBasicInstructionAccess().getBAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicInstruction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicInstruction__Group__2__Impl
	rule__BasicInstruction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicInstruction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicInstructionAccess().getCommaKeyword_2()); }
(
	KEYWORD_8 
)?
{ after(grammarAccess.getBasicInstructionAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicInstruction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicInstruction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicInstruction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicInstructionAccess().getAAssignment_3()); }
(rule__BasicInstruction__AAssignment_3)
{ after(grammarAccess.getBasicInstructionAccess().getAAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SpecialInstruction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpecialInstruction__Group__0__Impl
	rule__SpecialInstruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialInstruction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialInstructionAccess().getOpcodeAssignment_0()); }
(rule__SpecialInstruction__OpcodeAssignment_0)
{ after(grammarAccess.getSpecialInstructionAccess().getOpcodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpecialInstruction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpecialInstruction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialInstruction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialInstructionAccess().getAAssignment_1()); }
(rule__SpecialInstruction__AAssignment_1)
{ after(grammarAccess.getSpecialInstructionAccess().getAAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__AddressExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddressExpression__Group__0__Impl
	rule__AddressExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddressExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddressExpressionAccess().getLeftSquareBracketKeyword_0()); }

	KEYWORD_23 

{ after(grammarAccess.getAddressExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddressExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddressExpression__Group__1__Impl
	rule__AddressExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddressExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddressExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
	ruleLiteralExpression
{ after(grammarAccess.getAddressExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddressExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddressExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddressExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddressExpressionAccess().getRightSquareBracketKeyword_2()); }

	KEYWORD_24 

{ after(grammarAccess.getAddressExpressionAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRightModelParserRuleCall_1_2_0()); }
	ruleModel{ after(grammarAccess.getModelAccess().getRightModelParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LineDefinition__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineDefinitionAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getLineDefinitionAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LineDefinition__ContentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineDefinitionAccess().getContentLineContentParserRuleCall_1_0()); }
	ruleLineContent{ after(grammarAccess.getLineDefinitionAccess().getContentLineContentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LineDefinition__CommentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineDefinitionAccess().getCommentSL_COMMENTTerminalRuleCall_2_0()); }
	RULE_SL_COMMENT{ after(grammarAccess.getLineDefinitionAccess().getCommentSL_COMMENTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OriginDirective__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOriginDirectiveAccess().getValueNumberParserRuleCall_1_0()); }
	ruleNumber{ after(grammarAccess.getOriginDirectiveAccess().getValueNumberParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeDirectiveAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataLine__DataElementsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataLineAccess().getDataElementsDataElementParserRuleCall_1_1_0()); }
	ruleDataElement{ after(grammarAccess.getDataLineAccess().getDataElementsDataElementParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getOpOperatorEnumRuleCall_1_1_0()); }
	ruleOperator{ after(grammarAccess.getLiteralExpressionAccess().getOpOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getRightLiteralExpressionParserRuleCall_1_2_0()); }
	ruleLiteralExpression{ after(grammarAccess.getLiteralExpressionAccess().getRightLiteralExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueNonGroupOperandParserRuleCall_1_0()); }
	ruleNonGroupOperand{ after(grammarAccess.getTerminalExpressionAccess().getValueNonGroupOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NonGroupOperand__LabelNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonGroupOperandAccess().getLabelNameLabelCrossReference_2_0()); }
(
{ before(grammarAccess.getNonGroupOperandAccess().getLabelNameLabelIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getNonGroupOperandAccess().getLabelNameLabelIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getNonGroupOperandAccess().getLabelNameLabelCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PickValue__PickValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPickValueAccess().getPickValueLiteralExpressionParserRuleCall_1_0()); }
	ruleLiteralExpression{ after(grammarAccess.getPickValueAccess().getPickValueLiteralExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Label__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicInstruction__OpcodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicInstructionAccess().getOpcodeBasicOpcodeEnumRuleCall_0_0()); }
	ruleBasicOpcode{ after(grammarAccess.getBasicInstructionAccess().getOpcodeBasicOpcodeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicInstruction__BAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicInstructionAccess().getBValueParserRuleCall_1_0()); }
	ruleValue{ after(grammarAccess.getBasicInstructionAccess().getBValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicInstruction__AAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicInstructionAccess().getAValueParserRuleCall_3_0()); }
	ruleValue{ after(grammarAccess.getBasicInstructionAccess().getAValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialInstruction__OpcodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialInstructionAccess().getOpcodeSpecialOpcodeEnumRuleCall_0_0()); }
	ruleSpecialOpcode{ after(grammarAccess.getSpecialInstructionAccess().getOpcodeSpecialOpcodeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialInstruction__AAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialInstructionAccess().getAValueParserRuleCall_1_0()); }
	ruleValue{ after(grammarAccess.getSpecialInstructionAccess().getAValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NumberAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumberNumberParserRuleCall_0()); }
	ruleNumber{ after(grammarAccess.getLiteralAccess().getNumberNumberParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Register__StandardRegisterAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisterAccess().getStandardRegisterStandardRegisterEnumRuleCall_0_0()); }
	ruleStandardRegister{ after(grammarAccess.getRegisterAccess().getStandardRegisterStandardRegisterEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Register__SpecialRegisterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisterAccess().getSpecialRegisterSpecialRegisterEnumRuleCall_1_0()); }
	ruleSpecialRegister{ after(grammarAccess.getRegisterAccess().getSpecialRegisterSpecialRegisterEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




