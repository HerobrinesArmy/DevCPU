/*
* generated by Xtext
*/
parser grammar InternalDASMParser;

options {
	tokenVocab=InternalDASMLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package devcpu.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import devcpu.services.DASMGrammarAccess;

}

@members {


	private DASMGrammarAccess grammarAccess;
	 	
	public InternalDASMParser(TokenStream input, DASMGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Model";	
	} 
	   	   	
	@Override
	protected DASMGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelAccess().getLineDefinitionParserRuleCall_0()); 
    }
    this_LineDefinition_0=ruleLineDefinition
    {
        $current = $this_LineDefinition_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getModelAccess().getOperationLeftAction_1_0(),
            $current);
    }
)this_NL_2=RULE_NL
    { 
    newLeafNode(this_NL_2, grammarAccess.getModelAccess().getNLTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRightModelParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Model");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLineDefinition
entryRuleLineDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLineDefinitionRule()); }
	 iv_ruleLineDefinition=ruleLineDefinition 
	 { $current=$iv_ruleLineDefinition.current; } 
	 EOF 
;

// Rule LineDefinition
ruleLineDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLineDefinitionAccess().getLabelsLabelParserRuleCall_0_0()); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineDefinitionRule());
	        }
       		add(
       			$current, 
       			"labels",
        		lv_labels_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLineDefinitionAccess().getContentLineContentParserRuleCall_1_0()); 
	    }
		lv_content_1_0=ruleLineContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineDefinitionRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_1_0, 
        		"LineContent");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_comment_2_0=RULE_SL_COMMENT
		{
			newLeafNode(lv_comment_2_0, grammarAccess.getLineDefinitionAccess().getCommentSL_COMMENTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLineDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_2_0, 
        		"SL_COMMENT");
	    }

)
)?)
;





// Entry rule entryRuleLineContent
entryRuleLineContent returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLineContentRule()); }
	 iv_ruleLineContent=ruleLineContent 
	 { $current=$iv_ruleLineContent.current; } 
	 EOF 
;

// Rule LineContent
ruleLineContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLineContentAccess().getInstructionParserRuleCall_0()); 
    }
    this_Instruction_0=ruleInstruction
    {
        $current = $this_Instruction_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLineContentAccess().getDirectiveParserRuleCall_1()); 
    }
    this_Directive_1=ruleDirective
    {
        $current = $this_Directive_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLineContentAccess().getDataLineParserRuleCall_2()); 
    }
    this_DataLine_2=ruleDataLine
    {
        $current = $this_DataLine_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDirective
entryRuleDirective returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	 iv_ruleDirective=ruleDirective 
	 { $current=$iv_ruleDirective.current; } 
	 EOF 
;

// Rule Directive
ruleDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDirectiveAccess().getIncludeDirectiveParserRuleCall_0()); 
    }
    this_IncludeDirective_0=ruleIncludeDirective
    {
        $current = $this_IncludeDirective_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDirectiveAccess().getOriginDirectiveParserRuleCall_1()); 
    }
    this_OriginDirective_1=ruleOriginDirective
    {
        $current = $this_OriginDirective_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOriginDirective
entryRuleOriginDirective returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOriginDirectiveRule()); }
	 iv_ruleOriginDirective=ruleOriginDirective 
	 { $current=$iv_ruleOriginDirective.current; } 
	 EOF 
;

// Rule OriginDirective
ruleOriginDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_86
    {
    	newLeafNode(otherlv_0, grammarAccess.getOriginDirectiveAccess().getOriginKeyword_0_0());
    }

    |
	otherlv_1=KEYWORD_84
    {
    	newLeafNode(otherlv_1, grammarAccess.getOriginDirectiveAccess().getOriginKeyword_0_1());
    }

    |
	otherlv_2=KEYWORD_82
    {
    	newLeafNode(otherlv_2, grammarAccess.getOriginDirectiveAccess().getAlignKeyword_0_2());
    }

    |
	otherlv_3=KEYWORD_81
    {
    	newLeafNode(otherlv_3, grammarAccess.getOriginDirectiveAccess().getAlignKeyword_0_3());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOriginDirectiveAccess().getValueNumberParserRuleCall_1_0()); 
	    }
		lv_value_4_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOriginDirectiveRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIncludeDirectiveRule()); }
	 iv_ruleIncludeDirective=ruleIncludeDirective 
	 { $current=$iv_ruleIncludeDirective.current; } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_88
    {
    	newLeafNode(otherlv_0, grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0_0());
    }

    |
	otherlv_1=KEYWORD_87
    {
    	newLeafNode(otherlv_1, grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0_1());
    }

    |
	otherlv_2=KEYWORD_85
    {
    	newLeafNode(otherlv_2, grammarAccess.getIncludeDirectiveAccess().getImportKeyword_0_2());
    }

    |
	otherlv_3=KEYWORD_83
    {
    	newLeafNode(otherlv_3, grammarAccess.getIncludeDirectiveAccess().getImportKeyword_0_3());
    }
)(
(
		lv_name_4_0=RULE_STRING
		{
			newLeafNode(lv_name_4_0, grammarAccess.getIncludeDirectiveAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleDataLine
entryRuleDataLine returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDataLineRule()); }
	 iv_ruleDataLine=ruleDataLine 
	 { $current=$iv_ruleDataLine.current; } 
	 EOF 
;

// Rule DataLine
ruleDataLine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_45
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataLineAccess().getDATKeyword_0_0());
    }

    |
	otherlv_1=KEYWORD_78
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataLineAccess().getDatKeyword_0_1());
    }
)((
	otherlv_2=KEYWORD_8
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataLineAccess().getCommaKeyword_1_0());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getDataLineAccess().getDataElementsDataElementParserRuleCall_1_1_0()); 
	    }
		lv_dataElements_3_0=ruleDataElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataLineRule());
	        }
       		add(
       			$current, 
       			"dataElements",
        		lv_dataElements_3_0, 
        		"DataElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_8
    {
    	newLeafNode(otherlv_4, grammarAccess.getDataLineAccess().getCommaKeyword_1_2());
    }
)*)+)
;





// Entry rule entryRuleDataElement
entryRuleDataElement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDataElementRule()); } 
	 iv_ruleDataElement=ruleDataElement 
	 { $current=$iv_ruleDataElement.current.getText(); }  
	 EOF 
;

// Rule DataElement
ruleDataElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getDataElementAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataElementAccess().getNumberParserRuleCall_1()); 
    }
    this_Number_1=ruleNumber    {
		$current.merge(this_Number_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    {
        $current = $this_TerminalExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLiteralExpressionAccess().getOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getOpOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getRightLiteralExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_4
    {
    	newLeafNode(otherlv_0, grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getLiteralExpressionParserRuleCall_0_1()); 
    }
    this_LiteralExpression_1=ruleLiteralExpression
    {
        $current = $this_LiteralExpression_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_5
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getValueNonGroupOperandParserRuleCall_1_0()); 
	    }
		lv_value_3_0=ruleNonGroupOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"NonGroupOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNonGroupOperand
entryRuleNonGroupOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNonGroupOperandRule()); }
	 iv_ruleNonGroupOperand=ruleNonGroupOperand 
	 { $current=$iv_ruleNonGroupOperand.current; } 
	 EOF 
;

// Rule NonGroupOperand
ruleNonGroupOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNonGroupOperandAccess().getRegisterParserRuleCall_0()); 
    }
    this_Register_0=ruleRegister
    {
        $current = $this_Register_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNonGroupOperandAccess().getLiteralParserRuleCall_1()); 
    }
    this_Literal_1=ruleLiteral
    {
        $current = $this_Literal_1.current;
        afterParserOrEnumRuleCall();
    }

    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonGroupOperandRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getNonGroupOperandAccess().getLabelNameLabelCrossReference_2_0()); 
	}

)
)
    |
    { 
        newCompositeNode(grammarAccess.getNonGroupOperandAccess().getStackValueParserRuleCall_3()); 
    }
    this_StackValue_3=ruleStackValue
    {
        $current = $this_StackValue_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStackValue
entryRuleStackValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStackValueRule()); }
	 iv_ruleStackValue=ruleStackValue 
	 { $current=$iv_ruleStackValue.current; } 
	 EOF 
;

// Rule StackValue
ruleStackValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_68
    {
    	newLeafNode(otherlv_0, grammarAccess.getStackValueAccess().getPOPKeyword_0());
    }

    |
	otherlv_1=KEYWORD_80
    {
    	newLeafNode(otherlv_1, grammarAccess.getStackValueAccess().getPUSHKeyword_1());
    }

    |
    { 
        newCompositeNode(grammarAccess.getStackValueAccess().getPickValueParserRuleCall_2()); 
    }
    this_PickValue_2=rulePickValue
    {
        $current = $this_PickValue_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePickValue
entryRulePickValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPickValueRule()); }
	 iv_rulePickValue=rulePickValue 
	 { $current=$iv_rulePickValue.current; } 
	 EOF 
;

// Rule PickValue
rulePickValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_79
    {
    	newLeafNode(otherlv_0, grammarAccess.getPickValueAccess().getPICKKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPickValueAccess().getPickValueLiteralExpressionParserRuleCall_1_0()); 
	    }
		lv_pickValue_1_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPickValueRule());
	        }
       		set(
       			$current, 
       			"pickValue",
        		lv_pickValue_1_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_11
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabelAccess().getColonKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getBasicInstructionParserRuleCall_0()); 
    }
    this_BasicInstruction_0=ruleBasicInstruction
    {
        $current = $this_BasicInstruction_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getSpecialInstructionParserRuleCall_1()); 
    }
    this_SpecialInstruction_1=ruleSpecialInstruction
    {
        $current = $this_SpecialInstruction_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicInstruction
entryRuleBasicInstruction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBasicInstructionRule()); }
	 iv_ruleBasicInstruction=ruleBasicInstruction 
	 { $current=$iv_ruleBasicInstruction.current; } 
	 EOF 
;

// Rule BasicInstruction
ruleBasicInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicInstructionAccess().getOpcodeBasicOpcodeEnumRuleCall_0_0()); 
	    }
		lv_opcode_0_0=ruleBasicOpcode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicInstructionRule());
	        }
       		set(
       			$current, 
       			"opcode",
        		lv_opcode_0_0, 
        		"BasicOpcode");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicInstructionAccess().getBValueParserRuleCall_1_0()); 
	    }
		lv_b_1_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicInstructionRule());
	        }
       		set(
       			$current, 
       			"b",
        		lv_b_1_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_8
    {
    	newLeafNode(otherlv_2, grammarAccess.getBasicInstructionAccess().getCommaKeyword_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicInstructionAccess().getAValueParserRuleCall_3_0()); 
	    }
		lv_a_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicInstructionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSpecialInstruction
entryRuleSpecialInstruction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSpecialInstructionRule()); }
	 iv_ruleSpecialInstruction=ruleSpecialInstruction 
	 { $current=$iv_ruleSpecialInstruction.current; } 
	 EOF 
;

// Rule SpecialInstruction
ruleSpecialInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSpecialInstructionAccess().getOpcodeSpecialOpcodeEnumRuleCall_0_0()); 
	    }
		lv_opcode_0_0=ruleSpecialOpcode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecialInstructionRule());
	        }
       		set(
       			$current, 
       			"opcode",
        		lv_opcode_0_0, 
        		"SpecialOpcode");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecialInstructionAccess().getAValueParserRuleCall_1_0()); 
	    }
		lv_a_1_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecialInstructionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_1_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getLiteralExpressionParserRuleCall_0()); 
    }
    this_LiteralExpression_0=ruleLiteralExpression
    {
        $current = $this_LiteralExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getAddressExpressionParserRuleCall_1()); 
    }
    this_AddressExpression_1=ruleAddressExpression
    {
        $current = $this_AddressExpression_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getNumberNumberParserRuleCall_0()); 
	    }
		lv_number_0_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRegister
entryRuleRegister returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRegisterRule()); }
	 iv_ruleRegister=ruleRegister 
	 { $current=$iv_ruleRegister.current; } 
	 EOF 
;

// Rule Register
ruleRegister returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRegisterAccess().getStandardRegisterStandardRegisterEnumRuleCall_0_0()); 
	    }
		lv_standardRegister_0_0=ruleStandardRegister		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegisterRule());
	        }
       		set(
       			$current, 
       			"standardRegister",
        		lv_standardRegister_0_0, 
        		"StandardRegister");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRegisterAccess().getSpecialRegisterSpecialRegisterEnumRuleCall_1_0()); 
	    }
		lv_specialRegister_1_0=ruleSpecialRegister		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegisterRule());
	        }
       		set(
       			$current, 
       			"specialRegister",
        		lv_specialRegister_1_0, 
        		"SpecialRegister");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleAddressExpression
entryRuleAddressExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAddressExpressionRule()); }
	 iv_ruleAddressExpression=ruleAddressExpression 
	 { $current=$iv_ruleAddressExpression.current; } 
	 EOF 
;

// Rule AddressExpression
ruleAddressExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_23
    {
    	newLeafNode(otherlv_0, grammarAccess.getAddressExpressionAccess().getLeftSquareBracketKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getAddressExpressionAccess().getLiteralExpressionParserRuleCall_1()); 
    }
    this_LiteralExpression_1=ruleLiteralExpression
    {
        $current = $this_LiteralExpression_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_24
    {
    	newLeafNode(otherlv_2, grammarAccess.getAddressExpressionAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_HEXNUMBER_0=RULE_HEXNUMBER    {
		$current.merge(this_HEXNUMBER_0);
    }

    { 
    newLeafNode(this_HEXNUMBER_0, grammarAccess.getNumberAccess().getHEXNUMBERTerminalRuleCall_0()); 
    }

    |    this_DECNUMBER_1=RULE_DECNUMBER    {
		$current.merge(this_DECNUMBER_1);
    }

    { 
    newLeafNode(this_DECNUMBER_1, grammarAccess.getNumberAccess().getDECNUMBERTerminalRuleCall_1()); 
    }

    |    this_BINNUMBER_2=RULE_BINNUMBER    {
		$current.merge(this_BINNUMBER_2);
    }

    { 
    newLeafNode(this_BINNUMBER_2, grammarAccess.getNumberAccess().getBINNUMBERTerminalRuleCall_2()); 
    }
)
    ;





// Rule BasicOpcode
ruleBasicOpcode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_71
    {
        $current = grammarAccess.getBasicOpcodeAccess().getSETEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBasicOpcodeAccess().getSETEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_40
    {
        $current = grammarAccess.getBasicOpcodeAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBasicOpcodeAccess().getADDEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_76
    {
        $current = grammarAccess.getBasicOpcodeAccess().getSUBEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBasicOpcodeAccess().getSUBEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_67
    {
        $current = grammarAccess.getBasicOpcodeAccess().getMULEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBasicOpcodeAccess().getMULEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_65
    {
        $current = grammarAccess.getBasicOpcodeAccess().getMLIEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getBasicOpcodeAccess().getMLIEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=KEYWORD_46
    {
        $current = grammarAccess.getBasicOpcodeAccess().getDIVEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getBasicOpcodeAccess().getDIVEnumLiteralDeclaration_5()); 
    }
)
    |(    enumLiteral_6=KEYWORD_47
    {
        $current = grammarAccess.getBasicOpcodeAccess().getDVIEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getBasicOpcodeAccess().getDVIEnumLiteralDeclaration_6()); 
    }
)
    |(    enumLiteral_7=KEYWORD_66
    {
        $current = grammarAccess.getBasicOpcodeAccess().getMODEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getBasicOpcodeAccess().getMODEnumLiteralDeclaration_7()); 
    }
)
    |(    enumLiteral_8=KEYWORD_64
    {
        $current = grammarAccess.getBasicOpcodeAccess().getMDIEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getBasicOpcodeAccess().getMDIEnumLiteralDeclaration_8()); 
    }
)
    |(    enumLiteral_9=KEYWORD_42
    {
        $current = grammarAccess.getBasicOpcodeAccess().getANDEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getBasicOpcodeAccess().getANDEnumLiteralDeclaration_9()); 
    }
)
    |(    enumLiteral_10=KEYWORD_44
    {
        $current = grammarAccess.getBasicOpcodeAccess().getBOREnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getBasicOpcodeAccess().getBOREnumLiteralDeclaration_10()); 
    }
)
    |(    enumLiteral_11=KEYWORD_77
    {
        $current = grammarAccess.getBasicOpcodeAccess().getXOREnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getBasicOpcodeAccess().getXOREnumLiteralDeclaration_11()); 
    }
)
    |(    enumLiteral_12=KEYWORD_73
    {
        $current = grammarAccess.getBasicOpcodeAccess().getSHREnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getBasicOpcodeAccess().getSHREnumLiteralDeclaration_12()); 
    }
)
    |(    enumLiteral_13=KEYWORD_43
    {
        $current = grammarAccess.getBasicOpcodeAccess().getASREnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getBasicOpcodeAccess().getASREnumLiteralDeclaration_13()); 
    }
)
    |(    enumLiteral_14=KEYWORD_72
    {
        $current = grammarAccess.getBasicOpcodeAccess().getSHLEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getBasicOpcodeAccess().getSHLEnumLiteralDeclaration_14()); 
    }
)
    |(    enumLiteral_15=KEYWORD_55
    {
        $current = grammarAccess.getBasicOpcodeAccess().getIFBEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getBasicOpcodeAccess().getIFBEnumLiteralDeclaration_15()); 
    }
)
    |(    enumLiteral_16=KEYWORD_56
    {
        $current = grammarAccess.getBasicOpcodeAccess().getIFCEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getBasicOpcodeAccess().getIFCEnumLiteralDeclaration_16()); 
    }
)
    |(    enumLiteral_17=KEYWORD_57
    {
        $current = grammarAccess.getBasicOpcodeAccess().getIFEEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getBasicOpcodeAccess().getIFEEnumLiteralDeclaration_17()); 
    }
)
    |(    enumLiteral_18=KEYWORD_60
    {
        $current = grammarAccess.getBasicOpcodeAccess().getIFNEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getBasicOpcodeAccess().getIFNEnumLiteralDeclaration_18()); 
    }
)
    |(    enumLiteral_19=KEYWORD_58
    {
        $current = grammarAccess.getBasicOpcodeAccess().getIFGEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getBasicOpcodeAccess().getIFGEnumLiteralDeclaration_19()); 
    }
)
    |(    enumLiteral_20=KEYWORD_54
    {
        $current = grammarAccess.getBasicOpcodeAccess().getIFAEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getBasicOpcodeAccess().getIFAEnumLiteralDeclaration_20()); 
    }
)
    |(    enumLiteral_21=KEYWORD_59
    {
        $current = grammarAccess.getBasicOpcodeAccess().getIFLEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_21, grammarAccess.getBasicOpcodeAccess().getIFLEnumLiteralDeclaration_21()); 
    }
)
    |(    enumLiteral_22=KEYWORD_61
    {
        $current = grammarAccess.getBasicOpcodeAccess().getIFUEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_22, grammarAccess.getBasicOpcodeAccess().getIFUEnumLiteralDeclaration_22()); 
    }
)
    |(    enumLiteral_23=KEYWORD_41
    {
        $current = grammarAccess.getBasicOpcodeAccess().getADXEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_23, grammarAccess.getBasicOpcodeAccess().getADXEnumLiteralDeclaration_23()); 
    }
)
    |(    enumLiteral_24=KEYWORD_70
    {
        $current = grammarAccess.getBasicOpcodeAccess().getSBXEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_24, grammarAccess.getBasicOpcodeAccess().getSBXEnumLiteralDeclaration_24()); 
    }
)
    |(    enumLiteral_25=KEYWORD_75
    {
        $current = grammarAccess.getBasicOpcodeAccess().getSTIEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_25, grammarAccess.getBasicOpcodeAccess().getSTIEnumLiteralDeclaration_25()); 
    }
)
    |(    enumLiteral_26=KEYWORD_74
    {
        $current = grammarAccess.getBasicOpcodeAccess().getSTDEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_26, grammarAccess.getBasicOpcodeAccess().getSTDEnumLiteralDeclaration_26()); 
    }
));



// Rule SpecialOpcode
ruleSpecialOpcode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_63
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getJSREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSpecialOpcodeAccess().getJSREnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_62
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getINTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSpecialOpcodeAccess().getINTEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_51
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getIAGEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSpecialOpcodeAccess().getIAGEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_53
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getIASEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getSpecialOpcodeAccess().getIASEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_69
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getRFIEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getSpecialOpcodeAccess().getRFIEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=KEYWORD_52
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getIAQEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getSpecialOpcodeAccess().getIAQEnumLiteralDeclaration_5()); 
    }
)
    |(    enumLiteral_6=KEYWORD_49
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getHWNEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getSpecialOpcodeAccess().getHWNEnumLiteralDeclaration_6()); 
    }
)
    |(    enumLiteral_7=KEYWORD_50
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getHWQEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getSpecialOpcodeAccess().getHWQEnumLiteralDeclaration_7()); 
    }
)
    |(    enumLiteral_8=KEYWORD_48
    {
        $current = grammarAccess.getSpecialOpcodeAccess().getHWIEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getSpecialOpcodeAccess().getHWIEnumLiteralDeclaration_8()); 
    }
));



// Rule StandardRegister
ruleStandardRegister returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_15
    {
        $current = grammarAccess.getStandardRegisterAccess().getAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getStandardRegisterAccess().getAEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_16
    {
        $current = grammarAccess.getStandardRegisterAccess().getBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getStandardRegisterAccess().getBEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_17
    {
        $current = grammarAccess.getStandardRegisterAccess().getCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getStandardRegisterAccess().getCEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_20
    {
        $current = grammarAccess.getStandardRegisterAccess().getXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getStandardRegisterAccess().getXEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_21
    {
        $current = grammarAccess.getStandardRegisterAccess().getYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getStandardRegisterAccess().getYEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=KEYWORD_22
    {
        $current = grammarAccess.getStandardRegisterAccess().getZEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getStandardRegisterAccess().getZEnumLiteralDeclaration_5()); 
    }
)
    |(    enumLiteral_6=KEYWORD_18
    {
        $current = grammarAccess.getStandardRegisterAccess().getIEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getStandardRegisterAccess().getIEnumLiteralDeclaration_6()); 
    }
)
    |(    enumLiteral_7=KEYWORD_19
    {
        $current = grammarAccess.getStandardRegisterAccess().getJEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getStandardRegisterAccess().getJEnumLiteralDeclaration_7()); 
    }
));



// Rule SpecialRegister
ruleSpecialRegister returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_37
    {
        $current = grammarAccess.getSpecialRegisterAccess().getSPEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSpecialRegisterAccess().getSPEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_36
    {
        $current = grammarAccess.getSpecialRegisterAccess().getPCEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSpecialRegisterAccess().getPCEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_35
    {
        $current = grammarAccess.getSpecialRegisterAccess().getEXEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSpecialRegisterAccess().getEXEnumLiteralDeclaration_2()); 
    }
));



// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_7
    {
        $current = grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_9
    {
        $current = grammarAccess.getOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_6
    {
        $current = grammarAccess.getOperatorAccess().getMULTIPLYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getMULTIPLYEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_10
    {
        $current = grammarAccess.getOperatorAccess().getDIVIDEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getDIVIDEEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_2
    {
        $current = grammarAccess.getOperatorAccess().getMODULUSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getMODULUSEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=KEYWORD_30
    {
        $current = grammarAccess.getOperatorAccess().getLEFT_SHIFTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperatorAccess().getLEFT_SHIFTEnumLiteralDeclaration_5()); 
    }
)
    |(    enumLiteral_6=KEYWORD_34
    {
        $current = grammarAccess.getOperatorAccess().getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getOperatorAccess().getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_6()); 
    }
)
    |(    enumLiteral_7=KEYWORD_39
    {
        $current = grammarAccess.getOperatorAccess().getLOGICAL_RIGHT_SHIFTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getOperatorAccess().getLOGICAL_RIGHT_SHIFTEnumLiteralDeclaration_7()); 
    }
)
    |(    enumLiteral_8=KEYWORD_3
    {
        $current = grammarAccess.getOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration_8()); 
    }
)
    |(    enumLiteral_9=KEYWORD_26
    {
        $current = grammarAccess.getOperatorAccess().getBITWISE_OREnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getOperatorAccess().getBITWISE_OREnumLiteralDeclaration_9()); 
    }
)
    |(    enumLiteral_10=KEYWORD_25
    {
        $current = grammarAccess.getOperatorAccess().getBITWISE_XOREnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getOperatorAccess().getBITWISE_XOREnumLiteralDeclaration_10()); 
    }
)
    |(    enumLiteral_11=KEYWORD_27
    {
        $current = grammarAccess.getOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration_11()); 
    }
)
    |(    enumLiteral_12=KEYWORD_1
    {
        $current = grammarAccess.getOperatorAccess().getLOGICAL_NOTEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getOperatorAccess().getLOGICAL_NOTEnumLiteralDeclaration_12()); 
    }
)
    |(    enumLiteral_13=KEYWORD_32
    {
        $current = grammarAccess.getOperatorAccess().getEQUALEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getOperatorAccess().getEQUALEnumLiteralDeclaration_13()); 
    }
)
    |(    enumLiteral_14=KEYWORD_28
    {
        $current = grammarAccess.getOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_14()); 
    }
)
    |(    enumLiteral_15=KEYWORD_13
    {
        $current = grammarAccess.getOperatorAccess().getGREATEREnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getOperatorAccess().getGREATEREnumLiteralDeclaration_15()); 
    }
)
    |(    enumLiteral_16=KEYWORD_33
    {
        $current = grammarAccess.getOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_16()); 
    }
)
    |(    enumLiteral_17=KEYWORD_12
    {
        $current = grammarAccess.getOperatorAccess().getLESSEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getOperatorAccess().getLESSEnumLiteralDeclaration_17()); 
    }
)
    |(    enumLiteral_18=KEYWORD_31
    {
        $current = grammarAccess.getOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_18()); 
    }
)
    |(    enumLiteral_19=KEYWORD_29
    {
        $current = grammarAccess.getOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration_19()); 
    }
)
    |(    enumLiteral_20=KEYWORD_38
    {
        $current = grammarAccess.getOperatorAccess().getLOGICAL_OREnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getOperatorAccess().getLOGICAL_OREnumLiteralDeclaration_20()); 
    }
)
    |(    enumLiteral_21=KEYWORD_14
    {
        $current = grammarAccess.getOperatorAccess().getCONDITIONAL_TRUEEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_21, grammarAccess.getOperatorAccess().getCONDITIONAL_TRUEEnumLiteralDeclaration_21()); 
    }
)
    |(    enumLiteral_22=KEYWORD_11
    {
        $current = grammarAccess.getOperatorAccess().getCONDITIONAL_FALSEEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_22, grammarAccess.getOperatorAccess().getCONDITIONAL_FALSEEnumLiteralDeclaration_22()); 
    }
));



