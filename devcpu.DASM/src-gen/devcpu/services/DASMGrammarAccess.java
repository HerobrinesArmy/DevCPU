/*
* generated by Xtext
*/
package devcpu.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DASMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLineDefinitionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightModelParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Model:
		//
		//	LineDefinition ({Operation.left=current} NL right=Model)?;
		public ParserRule getRule() { return rule; }

		//LineDefinition ({Operation.left=current} NL right=Model)?
		public Group getGroup() { return cGroup; }

		//LineDefinition
		public RuleCall getLineDefinitionParserRuleCall_0() { return cLineDefinitionParserRuleCall_0; }

		//({Operation.left=current} NL right=Model)?
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_1_1() { return cNLTerminalRuleCall_1_1; }

		//right=Model
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Model
		public RuleCall getRightModelParserRuleCall_1_2_0() { return cRightModelParserRuleCall_1_2_0; }
	}

	public class LineDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentLineContentParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//LineDefinition:
		//
		//	labels+=Label* content=LineContent? comment=SL_COMMENT?;
		public ParserRule getRule() { return rule; }

		//labels+=Label* content=LineContent? comment=SL_COMMENT?
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//content=LineContent?
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//LineContent
		public RuleCall getContentLineContentParserRuleCall_1_0() { return cContentLineContentParserRuleCall_1_0; }

		//comment=SL_COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}

	public class LineContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataLineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LineContent:
		//
		//	Instruction | Directive | DataLine;
		public ParserRule getRule() { return rule; }

		//Instruction | Directive | DataLine
		public Alternatives getAlternatives() { return cAlternatives; }

		//Instruction
		public RuleCall getInstructionParserRuleCall_0() { return cInstructionParserRuleCall_0; }

		//Directive
		public RuleCall getDirectiveParserRuleCall_1() { return cDirectiveParserRuleCall_1; }

		//DataLine
		public RuleCall getDataLineParserRuleCall_2() { return cDataLineParserRuleCall_2; }
	}

	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Directive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIncludeDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOriginDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Directive:
		//
		//	IncludeDirective | OriginDirective;
		public ParserRule getRule() { return rule; }

		//IncludeDirective | OriginDirective
		public Alternatives getAlternatives() { return cAlternatives; }

		//IncludeDirective
		public RuleCall getIncludeDirectiveParserRuleCall_0() { return cIncludeDirectiveParserRuleCall_0; }

		//OriginDirective
		public RuleCall getOriginDirectiveParserRuleCall_1() { return cOriginDirectiveParserRuleCall_1; }
	}

	public class OriginDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OriginDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cOriginKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOriginKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAlignKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cAlignKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OriginDirective:
		//
		//	(".origin" | "#origin" | ".align" | "#align") value=Number;
		public ParserRule getRule() { return rule; }

		//(".origin" | "#origin" | ".align" | "#align") value=Number
		public Group getGroup() { return cGroup; }

		//".origin" | "#origin" | ".align" | "#align"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//".origin"
		public Keyword getOriginKeyword_0_0() { return cOriginKeyword_0_0; }

		//"#origin"
		public Keyword getOriginKeyword_0_1() { return cOriginKeyword_0_1; }

		//".align"
		public Keyword getAlignKeyword_0_2() { return cAlignKeyword_0_2; }

		//"#align"
		public Keyword getAlignKeyword_0_3() { return cAlignKeyword_0_3; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class IncludeDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIncludeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cImportKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cImportKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IncludeDirective:
		//
		//	(".include" | "#include" | ".import" | "#import") name=STRING;
		public ParserRule getRule() { return rule; }

		//(".include" | "#include" | ".import" | "#import") name=STRING
		public Group getGroup() { return cGroup; }

		//".include" | "#include" | ".import" | "#import"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//".include"
		public Keyword getIncludeKeyword_0_0() { return cIncludeKeyword_0_0; }

		//"#include"
		public Keyword getIncludeKeyword_0_1() { return cIncludeKeyword_0_1; }

		//".import"
		public Keyword getImportKeyword_0_2() { return cImportKeyword_0_2; }

		//"#import"
		public Keyword getImportKeyword_0_3() { return cImportKeyword_0_3; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class DataLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDATKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDatKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDataElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDataElementsDataElementParserRuleCall_1_1_0 = (RuleCall)cDataElementsAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//DataLine:
		//
		//	("DAT" | ".dat") (","* dataElements+=DataElement ","*)+;
		public ParserRule getRule() { return rule; }

		//("DAT" | ".dat") (","* dataElements+=DataElement ","*)+
		public Group getGroup() { return cGroup; }

		//"DAT" | ".dat"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"DAT"
		public Keyword getDATKeyword_0_0() { return cDATKeyword_0_0; }

		//".dat"
		public Keyword getDatKeyword_0_1() { return cDatKeyword_0_1; }

		//(","* dataElements+=DataElement ","*)+
		public Group getGroup_1() { return cGroup_1; }

		//","*
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//dataElements+=DataElement
		public Assignment getDataElementsAssignment_1_1() { return cDataElementsAssignment_1_1; }

		//DataElement
		public RuleCall getDataElementsDataElementParserRuleCall_1_1_0() { return cDataElementsDataElementParserRuleCall_1_1_0; }

		//","*
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
	}

	public class DataElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataElement:
		//
		//	STRING | Number;
		public ParserRule getRule() { return rule; }

		//STRING | Number
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }
	}

	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLiteralExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LiteralExpression:
		//
		//	TerminalExpression ({Operation.left=current} op=Operator right=LiteralExpression)?;
		public ParserRule getRule() { return rule; }

		//TerminalExpression ({Operation.left=current} op=Operator right=LiteralExpression)?
		public Group getGroup() { return cGroup; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//({Operation.left=current} op=Operator right=LiteralExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }

		//op=Operator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//Operator
		public RuleCall getOpOperatorEnumRuleCall_1_1_0() { return cOpOperatorEnumRuleCall_1_1_0; }

		//right=LiteralExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//LiteralExpression
		public RuleCall getRightLiteralExpressionParserRuleCall_1_2_0() { return cRightLiteralExpressionParserRuleCall_1_2_0; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueNonGroupOperandParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TerminalExpression returns LiteralExpression:
		//
		//	"(" LiteralExpression ")" | value=NonGroupOperand;
		public ParserRule getRule() { return rule; }

		//"(" LiteralExpression ")" | value=NonGroupOperand
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" LiteralExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_0_1() { return cLiteralExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//value=NonGroupOperand
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//NonGroupOperand
		public RuleCall getValueNonGroupOperandParserRuleCall_1_0() { return cValueNonGroupOperandParserRuleCall_1_0; }
	}

	public class NonGroupOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonGroupOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegisterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Assignment cLabelNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cLabelNameLabelCrossReference_2_0 = (CrossReference)cLabelNameAssignment_2.eContents().get(0);
		private final RuleCall cLabelNameLabelIDTerminalRuleCall_2_0_1 = (RuleCall)cLabelNameLabelCrossReference_2_0.eContents().get(1);
		private final RuleCall cStackValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NonGroupOperand:
		//
		//	Register | Literal | labelName=[Label] | StackValue;
		public ParserRule getRule() { return rule; }

		//Register | Literal | labelName=[Label] | StackValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Register
		public RuleCall getRegisterParserRuleCall_0() { return cRegisterParserRuleCall_0; }

		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }

		//labelName=[Label]
		public Assignment getLabelNameAssignment_2() { return cLabelNameAssignment_2; }

		//[Label]
		public CrossReference getLabelNameLabelCrossReference_2_0() { return cLabelNameLabelCrossReference_2_0; }

		//ID
		public RuleCall getLabelNameLabelIDTerminalRuleCall_2_0_1() { return cLabelNameLabelIDTerminalRuleCall_2_0_1; }

		//StackValue
		public RuleCall getStackValueParserRuleCall_3() { return cStackValueParserRuleCall_3; }
	}

	public class StackValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StackValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPOPKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPUSHKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cPickValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StackValue:
		//
		//	"POP" | "PUSH" | PickValue;
		public ParserRule getRule() { return rule; }

		//"POP" | "PUSH" | PickValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//"POP"
		public Keyword getPOPKeyword_0() { return cPOPKeyword_0; }

		//"PUSH"
		public Keyword getPUSHKeyword_1() { return cPUSHKeyword_1; }

		//PickValue
		public RuleCall getPickValueParserRuleCall_2() { return cPickValueParserRuleCall_2; }
	}

	public class PickValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PickValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPICKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPickValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPickValueLiteralExpressionParserRuleCall_1_0 = (RuleCall)cPickValueAssignment_1.eContents().get(0);
		
		//PickValue:
		//
		//	"PICK" pickValue=LiteralExpression;
		public ParserRule getRule() { return rule; }

		//"PICK" pickValue=LiteralExpression
		public Group getGroup() { return cGroup; }

		//"PICK"
		public Keyword getPICKKeyword_0() { return cPICKKeyword_0; }

		//pickValue=LiteralExpression
		public Assignment getPickValueAssignment_1() { return cPickValueAssignment_1; }

		//LiteralExpression
		public RuleCall getPickValueLiteralExpressionParserRuleCall_1_0() { return cPickValueLiteralExpressionParserRuleCall_1_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Label:
		//
		//	":" name=ID;
		public ParserRule getRule() { return rule; }

		//":" name=ID
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecialInstructionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instruction:
		//
		//	BasicInstruction | SpecialInstruction;
		public ParserRule getRule() { return rule; }

		//BasicInstruction | SpecialInstruction
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicInstruction
		public RuleCall getBasicInstructionParserRuleCall_0() { return cBasicInstructionParserRuleCall_0; }

		//SpecialInstruction
		public RuleCall getSpecialInstructionParserRuleCall_1() { return cSpecialInstructionParserRuleCall_1; }
	}

	public class BasicInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpcodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpcodeBasicOpcodeEnumRuleCall_0_0 = (RuleCall)cOpcodeAssignment_0.eContents().get(0);
		private final Assignment cBAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBValueParserRuleCall_1_0 = (RuleCall)cBAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAValueParserRuleCall_3_0 = (RuleCall)cAAssignment_3.eContents().get(0);
		
		//BasicInstruction:
		//
		//	opcode=BasicOpcode b=Value ","? a=Value;
		public ParserRule getRule() { return rule; }

		//opcode=BasicOpcode b=Value ","? a=Value
		public Group getGroup() { return cGroup; }

		//opcode=BasicOpcode
		public Assignment getOpcodeAssignment_0() { return cOpcodeAssignment_0; }

		//BasicOpcode
		public RuleCall getOpcodeBasicOpcodeEnumRuleCall_0_0() { return cOpcodeBasicOpcodeEnumRuleCall_0_0; }

		//b=Value
		public Assignment getBAssignment_1() { return cBAssignment_1; }

		//Value
		public RuleCall getBValueParserRuleCall_1_0() { return cBValueParserRuleCall_1_0; }

		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//a=Value
		public Assignment getAAssignment_3() { return cAAssignment_3; }

		//Value
		public RuleCall getAValueParserRuleCall_3_0() { return cAValueParserRuleCall_3_0; }
	}

	public class SpecialInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpcodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpcodeSpecialOpcodeEnumRuleCall_0_0 = (RuleCall)cOpcodeAssignment_0.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAValueParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		
		//SpecialInstruction:
		//
		//	opcode=SpecialOpcode a=Value;
		public ParserRule getRule() { return rule; }

		//opcode=SpecialOpcode a=Value
		public Group getGroup() { return cGroup; }

		//opcode=SpecialOpcode
		public Assignment getOpcodeAssignment_0() { return cOpcodeAssignment_0; }

		//SpecialOpcode
		public RuleCall getOpcodeSpecialOpcodeEnumRuleCall_0_0() { return cOpcodeSpecialOpcodeEnumRuleCall_0_0; }

		//a=Value
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//Value
		public RuleCall getAValueParserRuleCall_1_0() { return cAValueParserRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddressExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//
		//	LiteralExpression | AddressExpression;
		public ParserRule getRule() { return rule; }

		//LiteralExpression | AddressExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_0() { return cLiteralExpressionParserRuleCall_0; }

		//AddressExpression
		public RuleCall getAddressExpressionParserRuleCall_1() { return cAddressExpressionParserRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Assignment cNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_0 = (RuleCall)cNumberAssignment.eContents().get(0);
		
		//Literal:
		//
		//	number=Number;
		public ParserRule getRule() { return rule; }

		//number=Number
		public Assignment getNumberAssignment() { return cNumberAssignment; }

		//Number
		public RuleCall getNumberNumberParserRuleCall_0() { return cNumberNumberParserRuleCall_0; }
	}

	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Register");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStandardRegisterAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStandardRegisterStandardRegisterEnumRuleCall_0_0 = (RuleCall)cStandardRegisterAssignment_0.eContents().get(0);
		private final Assignment cSpecialRegisterAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSpecialRegisterSpecialRegisterEnumRuleCall_1_0 = (RuleCall)cSpecialRegisterAssignment_1.eContents().get(0);
		
		//Register:
		//
		//	standardRegister=StandardRegister | specialRegister=SpecialRegister;
		public ParserRule getRule() { return rule; }

		//standardRegister=StandardRegister | specialRegister=SpecialRegister
		public Alternatives getAlternatives() { return cAlternatives; }

		//standardRegister=StandardRegister
		public Assignment getStandardRegisterAssignment_0() { return cStandardRegisterAssignment_0; }

		//StandardRegister
		public RuleCall getStandardRegisterStandardRegisterEnumRuleCall_0_0() { return cStandardRegisterStandardRegisterEnumRuleCall_0_0; }

		//specialRegister=SpecialRegister
		public Assignment getSpecialRegisterAssignment_1() { return cSpecialRegisterAssignment_1; }

		//SpecialRegister
		public RuleCall getSpecialRegisterSpecialRegisterEnumRuleCall_1_0() { return cSpecialRegisterSpecialRegisterEnumRuleCall_1_0; }
	}

	public class LiteralAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNumberAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_1_0_0 = (RuleCall)cNumberAssignment_1_0.eContents().get(0);
		private final Assignment cLabelNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cLabelNameLabelCrossReference_1_1_0 = (CrossReference)cLabelNameAssignment_1_1.eContents().get(0);
		private final RuleCall cLabelNameLabelIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLabelNameLabelCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LiteralAddress:
		//
		//	"[" (number=Number | labelName=[Label]) "]";
		public ParserRule getRule() { return rule; }

		//"[" (number=Number | labelName=[Label]) "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//number=Number | labelName=[Label]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//number=Number
		public Assignment getNumberAssignment_1_0() { return cNumberAssignment_1_0; }

		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0_0() { return cNumberNumberParserRuleCall_1_0_0; }

		//labelName=[Label]
		public Assignment getLabelNameAssignment_1_1() { return cLabelNameAssignment_1_1; }

		//[Label]
		public CrossReference getLabelNameLabelCrossReference_1_1_0() { return cLabelNameLabelCrossReference_1_1_0; }

		//ID
		public RuleCall getLabelNameLabelIDTerminalRuleCall_1_1_0_1() { return cLabelNameLabelIDTerminalRuleCall_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class AddressExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddressExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AddressExpression:
		//
		//	"[" LiteralExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" LiteralExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXNUMBERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDECNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBINNUMBERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Number:
		//
		//	HEXNUMBER | DECNUMBER | BINNUMBER;
		public ParserRule getRule() { return rule; }

		//HEXNUMBER | DECNUMBER | BINNUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEXNUMBER
		public RuleCall getHEXNUMBERTerminalRuleCall_0() { return cHEXNUMBERTerminalRuleCall_0; }

		//DECNUMBER
		public RuleCall getDECNUMBERTerminalRuleCall_1() { return cDECNUMBERTerminalRuleCall_1; }

		//BINNUMBER
		public RuleCall getBINNUMBERTerminalRuleCall_2() { return cBINNUMBERTerminalRuleCall_2; }
	}
	
	
	public class BasicOpcodeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BasicOpcode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSETSETKeyword_0_0 = (Keyword)cSETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDADDKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUBSUBKeyword_2_0 = (Keyword)cSUBEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMULMULKeyword_3_0 = (Keyword)cMULEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMLIEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMLIMLIKeyword_4_0 = (Keyword)cMLIEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDIVDIVKeyword_5_0 = (Keyword)cDIVEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDVIEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDVIDVIKeyword_6_0 = (Keyword)cDVIEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMODMODKeyword_7_0 = (Keyword)cMODEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMDIEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMDIMDIKeyword_8_0 = (Keyword)cMDIEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cANDANDKeyword_9_0 = (Keyword)cANDEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cBOREnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cBORBORKeyword_10_0 = (Keyword)cBOREnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cXORXORKeyword_11_0 = (Keyword)cXOREnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cSHREnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cSHRSHRKeyword_12_0 = (Keyword)cSHREnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cASREnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cASRASRKeyword_13_0 = (Keyword)cASREnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cSHLEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cSHLSHLKeyword_14_0 = (Keyword)cSHLEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cIFBEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cIFBIFBKeyword_15_0 = (Keyword)cIFBEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cIFCEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cIFCIFCKeyword_16_0 = (Keyword)cIFCEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cIFEEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cIFEIFEKeyword_17_0 = (Keyword)cIFEEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cIFNEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cIFNIFNKeyword_18_0 = (Keyword)cIFNEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cIFGEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cIFGIFGKeyword_19_0 = (Keyword)cIFGEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cIFAEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cIFAIFAKeyword_20_0 = (Keyword)cIFAEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cIFLEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cIFLIFLKeyword_21_0 = (Keyword)cIFLEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cIFUEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cIFUIFUKeyword_22_0 = (Keyword)cIFUEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cADXEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cADXADXKeyword_23_0 = (Keyword)cADXEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cSBXEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cSBXSBXKeyword_24_0 = (Keyword)cSBXEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cSTIEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cSTISTIKeyword_25_0 = (Keyword)cSTIEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cSTDEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cSTDSTDKeyword_26_0 = (Keyword)cSTDEnumLiteralDeclaration_26.eContents().get(0);
		
		//enum BasicOpcode:
		//
		//	SET | ADD | SUB | MUL | MLI | DIV | DVI | MOD | MDI | AND | BOR | XOR | SHR | ASR | SHL | IFB | IFC | IFE | IFN | IFG
		//
		//	| IFA | IFL | IFU | ADX | SBX | STI | STD;
		public EnumRule getRule() { return rule; }

		//SET | ADD | SUB | MUL | MLI | DIV | DVI | MOD | MDI | AND | BOR | XOR | SHR | ASR | SHL | IFB | IFC | IFE | IFN | IFG |
		//
		//IFA | IFL | IFU | ADX | SBX | STI | STD
		public Alternatives getAlternatives() { return cAlternatives; }

		//SET
		public EnumLiteralDeclaration getSETEnumLiteralDeclaration_0() { return cSETEnumLiteralDeclaration_0; }

		//"SET"
		public Keyword getSETSETKeyword_0_0() { return cSETSETKeyword_0_0; }

		//ADD
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }

		//"ADD"
		public Keyword getADDADDKeyword_1_0() { return cADDADDKeyword_1_0; }

		//SUB
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_2() { return cSUBEnumLiteralDeclaration_2; }

		//"SUB"
		public Keyword getSUBSUBKeyword_2_0() { return cSUBSUBKeyword_2_0; }

		//MUL
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_3() { return cMULEnumLiteralDeclaration_3; }

		//"MUL"
		public Keyword getMULMULKeyword_3_0() { return cMULMULKeyword_3_0; }

		//MLI
		public EnumLiteralDeclaration getMLIEnumLiteralDeclaration_4() { return cMLIEnumLiteralDeclaration_4; }

		//"MLI"
		public Keyword getMLIMLIKeyword_4_0() { return cMLIMLIKeyword_4_0; }

		//DIV
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_5() { return cDIVEnumLiteralDeclaration_5; }

		//"DIV"
		public Keyword getDIVDIVKeyword_5_0() { return cDIVDIVKeyword_5_0; }

		//DVI
		public EnumLiteralDeclaration getDVIEnumLiteralDeclaration_6() { return cDVIEnumLiteralDeclaration_6; }

		//"DVI"
		public Keyword getDVIDVIKeyword_6_0() { return cDVIDVIKeyword_6_0; }

		//MOD
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_7() { return cMODEnumLiteralDeclaration_7; }

		//"MOD"
		public Keyword getMODMODKeyword_7_0() { return cMODMODKeyword_7_0; }

		//MDI
		public EnumLiteralDeclaration getMDIEnumLiteralDeclaration_8() { return cMDIEnumLiteralDeclaration_8; }

		//"MDI"
		public Keyword getMDIMDIKeyword_8_0() { return cMDIMDIKeyword_8_0; }

		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_9() { return cANDEnumLiteralDeclaration_9; }

		//"AND"
		public Keyword getANDANDKeyword_9_0() { return cANDANDKeyword_9_0; }

		//BOR
		public EnumLiteralDeclaration getBOREnumLiteralDeclaration_10() { return cBOREnumLiteralDeclaration_10; }

		//"BOR"
		public Keyword getBORBORKeyword_10_0() { return cBORBORKeyword_10_0; }

		//XOR
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_11() { return cXOREnumLiteralDeclaration_11; }

		//"XOR"
		public Keyword getXORXORKeyword_11_0() { return cXORXORKeyword_11_0; }

		//SHR
		public EnumLiteralDeclaration getSHREnumLiteralDeclaration_12() { return cSHREnumLiteralDeclaration_12; }

		//"SHR"
		public Keyword getSHRSHRKeyword_12_0() { return cSHRSHRKeyword_12_0; }

		//ASR
		public EnumLiteralDeclaration getASREnumLiteralDeclaration_13() { return cASREnumLiteralDeclaration_13; }

		//"ASR"
		public Keyword getASRASRKeyword_13_0() { return cASRASRKeyword_13_0; }

		//SHL
		public EnumLiteralDeclaration getSHLEnumLiteralDeclaration_14() { return cSHLEnumLiteralDeclaration_14; }

		//"SHL"
		public Keyword getSHLSHLKeyword_14_0() { return cSHLSHLKeyword_14_0; }

		//IFB
		public EnumLiteralDeclaration getIFBEnumLiteralDeclaration_15() { return cIFBEnumLiteralDeclaration_15; }

		//"IFB"
		public Keyword getIFBIFBKeyword_15_0() { return cIFBIFBKeyword_15_0; }

		//IFC
		public EnumLiteralDeclaration getIFCEnumLiteralDeclaration_16() { return cIFCEnumLiteralDeclaration_16; }

		//"IFC"
		public Keyword getIFCIFCKeyword_16_0() { return cIFCIFCKeyword_16_0; }

		//IFE
		public EnumLiteralDeclaration getIFEEnumLiteralDeclaration_17() { return cIFEEnumLiteralDeclaration_17; }

		//"IFE"
		public Keyword getIFEIFEKeyword_17_0() { return cIFEIFEKeyword_17_0; }

		//IFN
		public EnumLiteralDeclaration getIFNEnumLiteralDeclaration_18() { return cIFNEnumLiteralDeclaration_18; }

		//"IFN"
		public Keyword getIFNIFNKeyword_18_0() { return cIFNIFNKeyword_18_0; }

		//IFG
		public EnumLiteralDeclaration getIFGEnumLiteralDeclaration_19() { return cIFGEnumLiteralDeclaration_19; }

		//"IFG"
		public Keyword getIFGIFGKeyword_19_0() { return cIFGIFGKeyword_19_0; }

		//IFA
		public EnumLiteralDeclaration getIFAEnumLiteralDeclaration_20() { return cIFAEnumLiteralDeclaration_20; }

		//"IFA"
		public Keyword getIFAIFAKeyword_20_0() { return cIFAIFAKeyword_20_0; }

		//IFL
		public EnumLiteralDeclaration getIFLEnumLiteralDeclaration_21() { return cIFLEnumLiteralDeclaration_21; }

		//"IFL"
		public Keyword getIFLIFLKeyword_21_0() { return cIFLIFLKeyword_21_0; }

		//IFU
		public EnumLiteralDeclaration getIFUEnumLiteralDeclaration_22() { return cIFUEnumLiteralDeclaration_22; }

		//"IFU"
		public Keyword getIFUIFUKeyword_22_0() { return cIFUIFUKeyword_22_0; }

		//ADX
		public EnumLiteralDeclaration getADXEnumLiteralDeclaration_23() { return cADXEnumLiteralDeclaration_23; }

		//"ADX"
		public Keyword getADXADXKeyword_23_0() { return cADXADXKeyword_23_0; }

		//SBX
		public EnumLiteralDeclaration getSBXEnumLiteralDeclaration_24() { return cSBXEnumLiteralDeclaration_24; }

		//"SBX"
		public Keyword getSBXSBXKeyword_24_0() { return cSBXSBXKeyword_24_0; }

		//STI
		public EnumLiteralDeclaration getSTIEnumLiteralDeclaration_25() { return cSTIEnumLiteralDeclaration_25; }

		//"STI"
		public Keyword getSTISTIKeyword_25_0() { return cSTISTIKeyword_25_0; }

		//STD
		public EnumLiteralDeclaration getSTDEnumLiteralDeclaration_26() { return cSTDEnumLiteralDeclaration_26; }

		//"STD"
		public Keyword getSTDSTDKeyword_26_0() { return cSTDSTDKeyword_26_0; }
	}

	public class SpecialOpcodeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialOpcode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJSREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJSRJSRKeyword_0_0 = (Keyword)cJSREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTINTKeyword_1_0 = (Keyword)cINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIAGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIAGIAGKeyword_2_0 = (Keyword)cIAGEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIASEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIASIASKeyword_3_0 = (Keyword)cIASEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRFIEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRFIRFIKeyword_4_0 = (Keyword)cRFIEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIAQEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIAQIAQKeyword_5_0 = (Keyword)cIAQEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cHWNEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cHWNHWNKeyword_6_0 = (Keyword)cHWNEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHWQEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHWQHWQKeyword_7_0 = (Keyword)cHWQEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cHWIEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cHWIHWIKeyword_8_0 = (Keyword)cHWIEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum SpecialOpcode:
		//
		//	JSR | INT | IAG | IAS | RFI | IAQ | HWN | HWQ | HWI;
		public EnumRule getRule() { return rule; }

		//JSR | INT | IAG | IAS | RFI | IAQ | HWN | HWQ | HWI
		public Alternatives getAlternatives() { return cAlternatives; }

		//JSR
		public EnumLiteralDeclaration getJSREnumLiteralDeclaration_0() { return cJSREnumLiteralDeclaration_0; }

		//"JSR"
		public Keyword getJSRJSRKeyword_0_0() { return cJSRJSRKeyword_0_0; }

		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_1() { return cINTEnumLiteralDeclaration_1; }

		//"INT"
		public Keyword getINTINTKeyword_1_0() { return cINTINTKeyword_1_0; }

		//IAG
		public EnumLiteralDeclaration getIAGEnumLiteralDeclaration_2() { return cIAGEnumLiteralDeclaration_2; }

		//"IAG"
		public Keyword getIAGIAGKeyword_2_0() { return cIAGIAGKeyword_2_0; }

		//IAS
		public EnumLiteralDeclaration getIASEnumLiteralDeclaration_3() { return cIASEnumLiteralDeclaration_3; }

		//"IAS"
		public Keyword getIASIASKeyword_3_0() { return cIASIASKeyword_3_0; }

		//RFI
		public EnumLiteralDeclaration getRFIEnumLiteralDeclaration_4() { return cRFIEnumLiteralDeclaration_4; }

		//"RFI"
		public Keyword getRFIRFIKeyword_4_0() { return cRFIRFIKeyword_4_0; }

		//IAQ
		public EnumLiteralDeclaration getIAQEnumLiteralDeclaration_5() { return cIAQEnumLiteralDeclaration_5; }

		//"IAQ"
		public Keyword getIAQIAQKeyword_5_0() { return cIAQIAQKeyword_5_0; }

		//HWN
		public EnumLiteralDeclaration getHWNEnumLiteralDeclaration_6() { return cHWNEnumLiteralDeclaration_6; }

		//"HWN"
		public Keyword getHWNHWNKeyword_6_0() { return cHWNHWNKeyword_6_0; }

		//HWQ
		public EnumLiteralDeclaration getHWQEnumLiteralDeclaration_7() { return cHWQEnumLiteralDeclaration_7; }

		//"HWQ"
		public Keyword getHWQHWQKeyword_7_0() { return cHWQHWQKeyword_7_0; }

		//HWI
		public EnumLiteralDeclaration getHWIEnumLiteralDeclaration_8() { return cHWIEnumLiteralDeclaration_8; }

		//"HWI"
		public Keyword getHWIHWIKeyword_8_0() { return cHWIHWIKeyword_8_0; }
	}

	public class StandardRegisterElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StandardRegister");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAAKeyword_0_0 = (Keyword)cAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBBKeyword_1_0 = (Keyword)cBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCCKeyword_2_0 = (Keyword)cCEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cXXKeyword_3_0 = (Keyword)cXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cYYKeyword_4_0 = (Keyword)cYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cZEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cZZKeyword_5_0 = (Keyword)cZEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cIEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cIIKeyword_6_0 = (Keyword)cIEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cJEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cJJKeyword_7_0 = (Keyword)cJEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum StandardRegister:
		//
		//	A | B | C | X | Y | Z | I | J;
		public EnumRule getRule() { return rule; }

		//A | B | C | X | Y | Z | I | J
		public Alternatives getAlternatives() { return cAlternatives; }

		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_0() { return cAEnumLiteralDeclaration_0; }

		//"A"
		public Keyword getAAKeyword_0_0() { return cAAKeyword_0_0; }

		//B
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_1() { return cBEnumLiteralDeclaration_1; }

		//"B"
		public Keyword getBBKeyword_1_0() { return cBBKeyword_1_0; }

		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_2() { return cCEnumLiteralDeclaration_2; }

		//"C"
		public Keyword getCCKeyword_2_0() { return cCCKeyword_2_0; }

		//X
		public EnumLiteralDeclaration getXEnumLiteralDeclaration_3() { return cXEnumLiteralDeclaration_3; }

		//"X"
		public Keyword getXXKeyword_3_0() { return cXXKeyword_3_0; }

		//Y
		public EnumLiteralDeclaration getYEnumLiteralDeclaration_4() { return cYEnumLiteralDeclaration_4; }

		//"Y"
		public Keyword getYYKeyword_4_0() { return cYYKeyword_4_0; }

		//Z
		public EnumLiteralDeclaration getZEnumLiteralDeclaration_5() { return cZEnumLiteralDeclaration_5; }

		//"Z"
		public Keyword getZZKeyword_5_0() { return cZZKeyword_5_0; }

		//I
		public EnumLiteralDeclaration getIEnumLiteralDeclaration_6() { return cIEnumLiteralDeclaration_6; }

		//"I"
		public Keyword getIIKeyword_6_0() { return cIIKeyword_6_0; }

		//J
		public EnumLiteralDeclaration getJEnumLiteralDeclaration_7() { return cJEnumLiteralDeclaration_7; }

		//"J"
		public Keyword getJJKeyword_7_0() { return cJJKeyword_7_0; }
	}

	public class SpecialRegisterElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialRegister");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSPSPKeyword_0_0 = (Keyword)cSPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPCPCKeyword_1_0 = (Keyword)cPCEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEXEXKeyword_2_0 = (Keyword)cEXEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SpecialRegister:
		//
		//	SP | PC | EX;
		public EnumRule getRule() { return rule; }

		//SP | PC | EX
		public Alternatives getAlternatives() { return cAlternatives; }

		//SP
		public EnumLiteralDeclaration getSPEnumLiteralDeclaration_0() { return cSPEnumLiteralDeclaration_0; }

		//"SP"
		public Keyword getSPSPKeyword_0_0() { return cSPSPKeyword_0_0; }

		//PC
		public EnumLiteralDeclaration getPCEnumLiteralDeclaration_1() { return cPCEnumLiteralDeclaration_1; }

		//"PC"
		public Keyword getPCPCKeyword_1_0() { return cPCPCKeyword_1_0; }

		//EX
		public EnumLiteralDeclaration getEXEnumLiteralDeclaration_2() { return cEXEnumLiteralDeclaration_2; }

		//"EX"
		public Keyword getEXEXKeyword_2_0() { return cEXEXKeyword_2_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPLYAsteriskKeyword_2_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVIDESolidusKeyword_3_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMODULUSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMODULUSPercentSignKeyword_4_0 = (Keyword)cMODULUSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLEFT_SHIFTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLEFT_SHIFTLessThanSignLessThanSignKeyword_5_0 = (Keyword)cLEFT_SHIFTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_6_0 = (Keyword)cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLOGICAL_RIGHT_SHIFTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLOGICAL_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_7_0 = (Keyword)cLOGICAL_RIGHT_SHIFTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBITWISE_ANDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBITWISE_ANDAmpersandKeyword_8_0 = (Keyword)cBITWISE_ANDEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBITWISE_OREnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBITWISE_ORVerticalLineKeyword_9_0 = (Keyword)cBITWISE_OREnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cBITWISE_XOREnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cBITWISE_XORCircumflexAccentKeyword_10_0 = (Keyword)cBITWISE_XOREnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cBITWISE_NOTEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cBITWISE_NOTTildeKeyword_11_0 = (Keyword)cBITWISE_NOTEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cLOGICAL_NOTEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cLOGICAL_NOTExclamationMarkKeyword_12_0 = (Keyword)cLOGICAL_NOTEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_13_0 = (Keyword)cEQUALEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_14_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cGREATERGreaterThanSignKeyword_15_0 = (Keyword)cGREATEREnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_16_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cLESSLessThanSignKeyword_17_0 = (Keyword)cLESSEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cLESS_OR_EQUALLessThanSignEqualsSignKeyword_18_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cLOGICAL_ANDEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cLOGICAL_ANDAmpersandAmpersandKeyword_19_0 = (Keyword)cLOGICAL_ANDEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cLOGICAL_OREnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cLOGICAL_ORVerticalLineVerticalLineKeyword_20_0 = (Keyword)cLOGICAL_OREnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cCONDITIONAL_TRUEEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cCONDITIONAL_TRUEQuestionMarkKeyword_21_0 = (Keyword)cCONDITIONAL_TRUEEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cCONDITIONAL_FALSEEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cCONDITIONAL_FALSEColonKeyword_22_0 = (Keyword)cCONDITIONAL_FALSEEnumLiteralDeclaration_22.eContents().get(0);
		
		//enum Operator:
		//
		//	ADD="+" | SUBTRACT="-" | MULTIPLY="*" | DIVIDE="/" | MODULUS="%" | LEFT_SHIFT="<<" | ARITHMETIC_RIGHT_SHIFT=">>" |
		//
		//	LOGICAL_RIGHT_SHIFT=">>>" | BITWISE_AND="&" | BITWISE_OR="|" | BITWISE_XOR="^" | BITWISE_NOT="~" | LOGICAL_NOT="!" |
		//
		//	EQUAL="==" | NOT_EQUAL="!=" | GREATER=">" | GREATER_OR_EQUAL=">=" | LESS="<" | LESS_OR_EQUAL="<=" | LOGICAL_AND="&&"
		//
		//	| LOGICAL_OR="||" | CONDITIONAL_TRUE="?" | CONDITIONAL_FALSE=":";
		public EnumRule getRule() { return rule; }

		//ADD="+" | SUBTRACT="-" | MULTIPLY="*" | DIVIDE="/" | MODULUS="%" | LEFT_SHIFT="<<" | ARITHMETIC_RIGHT_SHIFT=">>" |
		//
		//LOGICAL_RIGHT_SHIFT=">>>" | BITWISE_AND="&" | BITWISE_OR="|" | BITWISE_XOR="^" | BITWISE_NOT="~" | LOGICAL_NOT="!" |
		//
		//EQUAL="==" | NOT_EQUAL="!=" | GREATER=">" | GREATER_OR_EQUAL=">=" | LESS="<" | LESS_OR_EQUAL="<=" | LOGICAL_AND="&&" |
		//
		//LOGICAL_OR="||" | CONDITIONAL_TRUE="?" | CONDITIONAL_FALSE=":"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }

		//SUBTRACT="-"
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }

		//MULTIPLY="*"
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_2() { return cMULTIPLYEnumLiteralDeclaration_2; }

		//"*"
		public Keyword getMULTIPLYAsteriskKeyword_2_0() { return cMULTIPLYAsteriskKeyword_2_0; }

		//DIVIDE="/"
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_3() { return cDIVIDEEnumLiteralDeclaration_3; }

		//"/"
		public Keyword getDIVIDESolidusKeyword_3_0() { return cDIVIDESolidusKeyword_3_0; }

		//MODULUS="%"
		public EnumLiteralDeclaration getMODULUSEnumLiteralDeclaration_4() { return cMODULUSEnumLiteralDeclaration_4; }

		//"%"
		public Keyword getMODULUSPercentSignKeyword_4_0() { return cMODULUSPercentSignKeyword_4_0; }

		//LEFT_SHIFT="<<"
		public EnumLiteralDeclaration getLEFT_SHIFTEnumLiteralDeclaration_5() { return cLEFT_SHIFTEnumLiteralDeclaration_5; }

		//"<<"
		public Keyword getLEFT_SHIFTLessThanSignLessThanSignKeyword_5_0() { return cLEFT_SHIFTLessThanSignLessThanSignKeyword_5_0; }

		//ARITHMETIC_RIGHT_SHIFT=">>"
		public EnumLiteralDeclaration getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_6() { return cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_6; }

		//">>"
		public Keyword getARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_6_0() { return cARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_6_0; }

		//LOGICAL_RIGHT_SHIFT=">>>"
		public EnumLiteralDeclaration getLOGICAL_RIGHT_SHIFTEnumLiteralDeclaration_7() { return cLOGICAL_RIGHT_SHIFTEnumLiteralDeclaration_7; }

		//">>>"
		public Keyword getLOGICAL_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_7_0() { return cLOGICAL_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_7_0; }

		//BITWISE_AND="&"
		public EnumLiteralDeclaration getBITWISE_ANDEnumLiteralDeclaration_8() { return cBITWISE_ANDEnumLiteralDeclaration_8; }

		//"&"
		public Keyword getBITWISE_ANDAmpersandKeyword_8_0() { return cBITWISE_ANDAmpersandKeyword_8_0; }

		//BITWISE_OR="|"
		public EnumLiteralDeclaration getBITWISE_OREnumLiteralDeclaration_9() { return cBITWISE_OREnumLiteralDeclaration_9; }

		//"|"
		public Keyword getBITWISE_ORVerticalLineKeyword_9_0() { return cBITWISE_ORVerticalLineKeyword_9_0; }

		//BITWISE_XOR="^"
		public EnumLiteralDeclaration getBITWISE_XOREnumLiteralDeclaration_10() { return cBITWISE_XOREnumLiteralDeclaration_10; }

		//"^"
		public Keyword getBITWISE_XORCircumflexAccentKeyword_10_0() { return cBITWISE_XORCircumflexAccentKeyword_10_0; }

		//BITWISE_NOT="~"
		public EnumLiteralDeclaration getBITWISE_NOTEnumLiteralDeclaration_11() { return cBITWISE_NOTEnumLiteralDeclaration_11; }

		//"~"
		public Keyword getBITWISE_NOTTildeKeyword_11_0() { return cBITWISE_NOTTildeKeyword_11_0; }

		//LOGICAL_NOT="!"
		public EnumLiteralDeclaration getLOGICAL_NOTEnumLiteralDeclaration_12() { return cLOGICAL_NOTEnumLiteralDeclaration_12; }

		//"!"
		public Keyword getLOGICAL_NOTExclamationMarkKeyword_12_0() { return cLOGICAL_NOTExclamationMarkKeyword_12_0; }

		//EQUAL="=="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_13() { return cEQUALEnumLiteralDeclaration_13; }

		//"=="
		public Keyword getEQUALEqualsSignEqualsSignKeyword_13_0() { return cEQUALEqualsSignEqualsSignKeyword_13_0; }

		//NOT_EQUAL="!="
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_14() { return cNOT_EQUALEnumLiteralDeclaration_14; }

		//"!="
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_14_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_14_0; }

		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_15() { return cGREATEREnumLiteralDeclaration_15; }

		//">"
		public Keyword getGREATERGreaterThanSignKeyword_15_0() { return cGREATERGreaterThanSignKeyword_15_0; }

		//GREATER_OR_EQUAL=">="
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_16() { return cGREATER_OR_EQUALEnumLiteralDeclaration_16; }

		//">="
		public Keyword getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_16_0() { return cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_16_0; }

		//LESS="<"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_17() { return cLESSEnumLiteralDeclaration_17; }

		//"<"
		public Keyword getLESSLessThanSignKeyword_17_0() { return cLESSLessThanSignKeyword_17_0; }

		//LESS_OR_EQUAL="<="
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_18() { return cLESS_OR_EQUALEnumLiteralDeclaration_18; }

		//"<="
		public Keyword getLESS_OR_EQUALLessThanSignEqualsSignKeyword_18_0() { return cLESS_OR_EQUALLessThanSignEqualsSignKeyword_18_0; }

		//LOGICAL_AND="&&"
		public EnumLiteralDeclaration getLOGICAL_ANDEnumLiteralDeclaration_19() { return cLOGICAL_ANDEnumLiteralDeclaration_19; }

		//"&&"
		public Keyword getLOGICAL_ANDAmpersandAmpersandKeyword_19_0() { return cLOGICAL_ANDAmpersandAmpersandKeyword_19_0; }

		//LOGICAL_OR="||"
		public EnumLiteralDeclaration getLOGICAL_OREnumLiteralDeclaration_20() { return cLOGICAL_OREnumLiteralDeclaration_20; }

		//"||"
		public Keyword getLOGICAL_ORVerticalLineVerticalLineKeyword_20_0() { return cLOGICAL_ORVerticalLineVerticalLineKeyword_20_0; }

		//CONDITIONAL_TRUE="?"
		public EnumLiteralDeclaration getCONDITIONAL_TRUEEnumLiteralDeclaration_21() { return cCONDITIONAL_TRUEEnumLiteralDeclaration_21; }

		//"?"
		public Keyword getCONDITIONAL_TRUEQuestionMarkKeyword_21_0() { return cCONDITIONAL_TRUEQuestionMarkKeyword_21_0; }

		//CONDITIONAL_FALSE=":"
		public EnumLiteralDeclaration getCONDITIONAL_FALSEEnumLiteralDeclaration_22() { return cCONDITIONAL_FALSEEnumLiteralDeclaration_22; }

		//":"
		public Keyword getCONDITIONAL_FALSEColonKeyword_22_0() { return cCONDITIONAL_FALSEColonKeyword_22_0; }
	}
	
	private ModelElements pModel;
	private LineDefinitionElements pLineDefinition;
	private LineContentElements pLineContent;
	private DirectiveElements pDirective;
	private OriginDirectiveElements pOriginDirective;
	private IncludeDirectiveElements pIncludeDirective;
	private DataLineElements pDataLine;
	private DataElementElements pDataElement;
	private LiteralExpressionElements pLiteralExpression;
	private TerminalExpressionElements pTerminalExpression;
	private NonGroupOperandElements pNonGroupOperand;
	private StackValueElements pStackValue;
	private PickValueElements pPickValue;
	private LabelElements pLabel;
	private InstructionElements pInstruction;
	private BasicInstructionElements pBasicInstruction;
	private SpecialInstructionElements pSpecialInstruction;
	private ValueElements pValue;
	private LiteralElements pLiteral;
	private RegisterElements pRegister;
	private LiteralAddressElements pLiteralAddress;
	private AddressExpressionElements pAddressExpression;
	private NumberElements pNumber;
	private BasicOpcodeElements unknownRuleBasicOpcode;
	private SpecialOpcodeElements unknownRuleSpecialOpcode;
	private StandardRegisterElements unknownRuleStandardRegister;
	private SpecialRegisterElements unknownRuleSpecialRegister;
	private OperatorElements unknownRuleOperator;
	private TerminalRule tID;
	private TerminalRule tHEXNUMBER;
	private TerminalRule tDECNUMBER;
	private TerminalRule tBINNUMBER;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tSTRING;
	private TerminalRule tWS;
	private TerminalRule tNL;
	
	private final Grammar grammar;

	@Inject
	public DASMGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("devcpu.DASM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//
	//	LineDefinition ({Operation.left=current} NL right=Model)?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//LineDefinition:
	//
	//	labels+=Label* content=LineContent? comment=SL_COMMENT?;
	public LineDefinitionElements getLineDefinitionAccess() {
		return (pLineDefinition != null) ? pLineDefinition : (pLineDefinition = new LineDefinitionElements());
	}
	
	public ParserRule getLineDefinitionRule() {
		return getLineDefinitionAccess().getRule();
	}

	//LineContent:
	//
	//	Instruction | Directive | DataLine;
	public LineContentElements getLineContentAccess() {
		return (pLineContent != null) ? pLineContent : (pLineContent = new LineContentElements());
	}
	
	public ParserRule getLineContentRule() {
		return getLineContentAccess().getRule();
	}

	//Directive:
	//
	//	IncludeDirective | OriginDirective;
	public DirectiveElements getDirectiveAccess() {
		return (pDirective != null) ? pDirective : (pDirective = new DirectiveElements());
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}

	//OriginDirective:
	//
	//	(".origin" | "#origin" | ".align" | "#align") value=Number;
	public OriginDirectiveElements getOriginDirectiveAccess() {
		return (pOriginDirective != null) ? pOriginDirective : (pOriginDirective = new OriginDirectiveElements());
	}
	
	public ParserRule getOriginDirectiveRule() {
		return getOriginDirectiveAccess().getRule();
	}

	//IncludeDirective:
	//
	//	(".include" | "#include" | ".import" | "#import") name=STRING;
	public IncludeDirectiveElements getIncludeDirectiveAccess() {
		return (pIncludeDirective != null) ? pIncludeDirective : (pIncludeDirective = new IncludeDirectiveElements());
	}
	
	public ParserRule getIncludeDirectiveRule() {
		return getIncludeDirectiveAccess().getRule();
	}

	//DataLine:
	//
	//	("DAT" | ".dat") (","* dataElements+=DataElement ","*)+;
	public DataLineElements getDataLineAccess() {
		return (pDataLine != null) ? pDataLine : (pDataLine = new DataLineElements());
	}
	
	public ParserRule getDataLineRule() {
		return getDataLineAccess().getRule();
	}

	//DataElement:
	//
	//	STRING | Number;
	public DataElementElements getDataElementAccess() {
		return (pDataElement != null) ? pDataElement : (pDataElement = new DataElementElements());
	}
	
	public ParserRule getDataElementRule() {
		return getDataElementAccess().getRule();
	}

	//LiteralExpression:
	//
	//	TerminalExpression ({Operation.left=current} op=Operator right=LiteralExpression)?;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return (pLiteralExpression != null) ? pLiteralExpression : (pLiteralExpression = new LiteralExpressionElements());
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}

	//TerminalExpression returns LiteralExpression:
	//
	//	"(" LiteralExpression ")" | value=NonGroupOperand;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//NonGroupOperand:
	//
	//	Register | Literal | labelName=[Label] | StackValue;
	public NonGroupOperandElements getNonGroupOperandAccess() {
		return (pNonGroupOperand != null) ? pNonGroupOperand : (pNonGroupOperand = new NonGroupOperandElements());
	}
	
	public ParserRule getNonGroupOperandRule() {
		return getNonGroupOperandAccess().getRule();
	}

	//StackValue:
	//
	//	"POP" | "PUSH" | PickValue;
	public StackValueElements getStackValueAccess() {
		return (pStackValue != null) ? pStackValue : (pStackValue = new StackValueElements());
	}
	
	public ParserRule getStackValueRule() {
		return getStackValueAccess().getRule();
	}

	//PickValue:
	//
	//	"PICK" pickValue=LiteralExpression;
	public PickValueElements getPickValueAccess() {
		return (pPickValue != null) ? pPickValue : (pPickValue = new PickValueElements());
	}
	
	public ParserRule getPickValueRule() {
		return getPickValueAccess().getRule();
	}

	//Label:
	//
	//	":" name=ID;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Instruction:
	//
	//	BasicInstruction | SpecialInstruction;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//BasicInstruction:
	//
	//	opcode=BasicOpcode b=Value ","? a=Value;
	public BasicInstructionElements getBasicInstructionAccess() {
		return (pBasicInstruction != null) ? pBasicInstruction : (pBasicInstruction = new BasicInstructionElements());
	}
	
	public ParserRule getBasicInstructionRule() {
		return getBasicInstructionAccess().getRule();
	}

	//SpecialInstruction:
	//
	//	opcode=SpecialOpcode a=Value;
	public SpecialInstructionElements getSpecialInstructionAccess() {
		return (pSpecialInstruction != null) ? pSpecialInstruction : (pSpecialInstruction = new SpecialInstructionElements());
	}
	
	public ParserRule getSpecialInstructionRule() {
		return getSpecialInstructionAccess().getRule();
	}

	//Value:
	//
	//	LiteralExpression | AddressExpression;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Literal:
	//
	//	number=Number;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//Register:
	//
	//	standardRegister=StandardRegister | specialRegister=SpecialRegister;
	public RegisterElements getRegisterAccess() {
		return (pRegister != null) ? pRegister : (pRegister = new RegisterElements());
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}

	//LiteralAddress:
	//
	//	"[" (number=Number | labelName=[Label]) "]";
	public LiteralAddressElements getLiteralAddressAccess() {
		return (pLiteralAddress != null) ? pLiteralAddress : (pLiteralAddress = new LiteralAddressElements());
	}
	
	public ParserRule getLiteralAddressRule() {
		return getLiteralAddressAccess().getRule();
	}

	//AddressExpression:
	//
	//	"[" LiteralExpression "]";
	public AddressExpressionElements getAddressExpressionAccess() {
		return (pAddressExpression != null) ? pAddressExpression : (pAddressExpression = new AddressExpressionElements());
	}
	
	public ParserRule getAddressExpressionRule() {
		return getAddressExpressionAccess().getRule();
	}

	//Number:
	//
	//	HEXNUMBER | DECNUMBER | BINNUMBER;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//enum BasicOpcode:
	//
	//	SET | ADD | SUB | MUL | MLI | DIV | DVI | MOD | MDI | AND | BOR | XOR | SHR | ASR | SHL | IFB | IFC | IFE | IFN | IFG
	//
	//	| IFA | IFL | IFU | ADX | SBX | STI | STD;
	public BasicOpcodeElements getBasicOpcodeAccess() {
		return (unknownRuleBasicOpcode != null) ? unknownRuleBasicOpcode : (unknownRuleBasicOpcode = new BasicOpcodeElements());
	}
	
	public EnumRule getBasicOpcodeRule() {
		return getBasicOpcodeAccess().getRule();
	}

	//enum SpecialOpcode:
	//
	//	JSR | INT | IAG | IAS | RFI | IAQ | HWN | HWQ | HWI;
	public SpecialOpcodeElements getSpecialOpcodeAccess() {
		return (unknownRuleSpecialOpcode != null) ? unknownRuleSpecialOpcode : (unknownRuleSpecialOpcode = new SpecialOpcodeElements());
	}
	
	public EnumRule getSpecialOpcodeRule() {
		return getSpecialOpcodeAccess().getRule();
	}

	//enum StandardRegister:
	//
	//	A | B | C | X | Y | Z | I | J;
	public StandardRegisterElements getStandardRegisterAccess() {
		return (unknownRuleStandardRegister != null) ? unknownRuleStandardRegister : (unknownRuleStandardRegister = new StandardRegisterElements());
	}
	
	public EnumRule getStandardRegisterRule() {
		return getStandardRegisterAccess().getRule();
	}

	//enum SpecialRegister:
	//
	//	SP | PC | EX;
	public SpecialRegisterElements getSpecialRegisterAccess() {
		return (unknownRuleSpecialRegister != null) ? unknownRuleSpecialRegister : (unknownRuleSpecialRegister = new SpecialRegisterElements());
	}
	
	public EnumRule getSpecialRegisterRule() {
		return getSpecialRegisterAccess().getRule();
	}

	//enum Operator:
	//
	//	ADD="+" | SUBTRACT="-" | MULTIPLY="*" | DIVIDE="/" | MODULUS="%" | LEFT_SHIFT="<<" | ARITHMETIC_RIGHT_SHIFT=">>" |
	//
	//	LOGICAL_RIGHT_SHIFT=">>>" | BITWISE_AND="&" | BITWISE_OR="|" | BITWISE_XOR="^" | BITWISE_NOT="~" | LOGICAL_NOT="!" |
	//
	//	EQUAL="==" | NOT_EQUAL="!=" | GREATER=">" | GREATER_OR_EQUAL=">=" | LESS="<" | LESS_OR_EQUAL="<=" | LOGICAL_AND="&&"
	//
	//	| LOGICAL_OR="||" | CONDITIONAL_TRUE="?" | CONDITIONAL_FALSE=":";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal HEXNUMBER:
	//
	//	"0x" ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXNUMBERRule() {
		return (tHEXNUMBER != null) ? tHEXNUMBER : (tHEXNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXNUMBER"));
	} 

	//terminal DECNUMBER:
	//
	//	"-"? "0".."9"+;
	public TerminalRule getDECNUMBERRule() {
		return (tDECNUMBER != null) ? tDECNUMBER : (tDECNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECNUMBER"));
	} 

	//terminal BINNUMBER:
	//
	//	"0b" ("0" | "1")+;
	public TerminalRule getBINNUMBERRule() {
		return (tBINNUMBER != null) ? tBINNUMBER : (tBINNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BINNUMBER"));
	} 

	//terminal SL_COMMENT:
	//
	//	";" !("\n" | "\r")*;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal WS:
	//
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NL:
	//
	//	(" " | "\t")* ("\r"? "\n");
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 
}
